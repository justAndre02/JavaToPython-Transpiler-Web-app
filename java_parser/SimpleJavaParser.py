# Generated from SimpleJava.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,103,1039,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,1,0,3,0,162,8,0,1,0,5,0,165,8,0,10,0,12,0,168,9,0,1,
        0,4,0,171,8,0,11,0,12,0,172,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,3,2,185,8,2,1,2,1,2,1,3,1,3,1,3,5,3,192,8,3,10,3,12,3,195,9,
        3,1,4,1,4,1,4,3,4,200,8,4,1,5,5,5,203,8,5,10,5,12,5,206,9,5,1,5,
        5,5,209,8,5,10,5,12,5,212,9,5,1,5,1,5,1,5,3,5,217,8,5,1,5,1,5,3,
        5,221,8,5,1,5,3,5,224,8,5,1,5,1,5,5,5,228,8,5,10,5,12,5,231,9,5,
        1,5,1,5,1,6,5,6,236,8,6,10,6,12,6,239,9,6,1,6,1,6,1,6,3,6,244,8,
        6,1,6,1,6,3,6,248,8,6,1,6,1,6,5,6,252,8,6,10,6,12,6,255,9,6,1,6,
        1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,268,8,8,1,9,5,9,271,
        8,9,10,9,12,9,274,9,9,1,9,1,9,1,9,1,9,3,9,280,8,9,1,9,1,9,1,9,3,
        9,285,8,9,1,9,1,9,1,10,5,10,290,8,10,10,10,12,10,293,9,10,1,10,1,
        10,1,10,1,10,3,10,299,8,10,1,10,1,10,1,10,3,10,304,8,10,3,10,306,
        8,10,1,10,3,10,309,8,10,1,10,1,10,1,11,1,11,1,11,5,11,316,8,11,10,
        11,12,11,319,9,11,1,12,1,12,3,12,323,8,12,1,12,3,12,326,8,12,1,13,
        1,13,5,13,330,8,13,10,13,12,13,333,9,13,1,14,1,14,1,14,1,14,5,14,
        339,8,14,10,14,12,14,342,9,14,1,14,1,14,1,15,1,15,1,15,3,15,349,
        8,15,1,16,1,16,1,16,5,16,354,8,16,10,16,12,16,357,9,16,1,17,1,17,
        1,17,1,17,1,17,3,17,364,8,17,1,18,5,18,367,8,18,10,18,12,18,370,
        9,18,1,18,5,18,373,8,18,10,18,12,18,376,9,18,1,18,1,18,1,18,1,18,
        5,18,382,8,18,10,18,12,18,385,9,18,1,18,1,18,1,19,1,19,1,19,3,19,
        392,8,19,1,20,1,20,3,20,396,8,20,1,21,5,21,399,8,21,10,21,12,21,
        402,9,21,1,21,1,21,1,21,3,21,407,8,21,1,21,1,21,1,21,5,21,412,8,
        21,10,21,12,21,415,9,21,1,21,1,21,1,22,5,22,420,8,22,10,22,12,22,
        423,9,22,1,22,5,22,426,8,22,10,22,12,22,429,9,22,1,22,1,22,1,22,
        1,22,3,22,435,8,22,1,22,1,22,1,22,3,22,440,8,22,1,22,1,22,5,22,444,
        8,22,10,22,12,22,447,9,22,1,22,1,22,1,23,1,23,1,24,1,24,3,24,455,
        8,24,1,25,1,25,1,25,5,25,460,8,25,10,25,12,25,463,9,25,1,25,1,25,
        1,25,5,25,468,8,25,10,25,12,25,471,9,25,3,25,473,8,25,1,26,1,26,
        3,26,477,8,26,1,26,1,26,1,26,3,26,482,8,26,5,26,484,8,26,10,26,12,
        26,487,9,26,1,27,1,27,1,28,1,28,1,28,1,28,5,28,495,8,28,10,28,12,
        28,498,9,28,1,28,1,28,1,29,1,29,1,29,1,29,3,29,506,8,29,3,29,508,
        8,29,1,30,1,30,1,30,5,30,513,8,30,10,30,12,30,516,9,30,1,31,1,31,
        1,31,1,31,3,31,522,8,31,1,31,3,31,525,8,31,1,32,1,32,1,32,5,32,530,
        8,32,10,32,12,32,533,9,32,1,33,1,33,1,33,1,33,3,33,539,8,33,1,34,
        1,34,1,34,3,34,544,8,34,1,35,1,35,1,35,1,35,5,35,550,8,35,10,35,
        12,35,553,9,35,3,35,555,8,35,1,35,3,35,558,8,35,1,35,1,35,1,36,1,
        36,1,36,5,36,565,8,36,10,36,12,36,568,9,36,1,37,5,37,571,8,37,10,
        37,12,37,574,9,37,1,37,1,37,1,37,1,38,1,38,1,38,5,38,582,8,38,10,
        38,12,38,585,9,38,1,39,1,39,1,39,5,39,590,8,39,10,39,12,39,593,9,
        39,1,40,1,40,5,40,597,8,40,10,40,12,40,600,9,40,1,40,1,40,1,41,1,
        41,1,41,3,41,607,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,626,8,42,1,42,1,
        42,1,42,3,42,631,8,42,1,43,1,43,1,43,1,43,1,43,1,43,5,43,639,8,43,
        10,43,12,43,642,9,43,1,43,1,43,1,44,4,44,647,8,44,11,44,12,44,648,
        1,44,5,44,652,8,44,10,44,12,44,655,9,44,1,45,1,45,1,45,1,45,1,45,
        3,45,662,8,45,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,3,48,672,8,
        48,1,48,1,48,1,49,1,49,3,49,678,8,49,1,49,1,49,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,
        52,1,52,1,53,1,53,1,53,1,53,5,53,704,8,53,10,53,12,53,707,9,53,1,
        53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,718,8,54,1,55,1,
        55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,3,
        57,734,8,57,1,58,1,58,1,58,1,58,1,58,1,59,3,59,742,8,59,1,59,1,59,
        3,59,746,8,59,1,59,1,59,3,59,750,8,59,1,60,1,60,1,60,1,60,3,60,756,
        8,60,1,61,1,61,1,62,1,62,1,62,5,62,763,8,62,10,62,12,62,766,9,62,
        1,62,1,62,3,62,770,8,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,
        1,64,3,64,781,8,64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,802,8,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,3,66,844,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,3,66,857,8,66,1,66,1,66,1,66,1,66,3,66,863,8,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,876,8,66,1,
        66,1,66,1,66,3,66,881,8,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,5,66,892,8,66,10,66,12,66,895,9,66,1,67,1,67,1,67,3,67,900,
        8,67,1,68,1,68,3,68,904,8,68,1,69,1,69,3,69,908,8,69,1,69,1,69,1,
        70,1,70,1,70,1,70,5,70,916,8,70,10,70,12,70,919,9,70,1,70,1,70,1,
        70,1,70,1,70,1,70,1,70,5,70,928,8,70,10,70,12,70,931,9,70,1,70,1,
        70,5,70,935,8,70,10,70,12,70,938,9,70,3,70,940,8,70,1,71,3,71,943,
        8,71,1,71,1,71,3,71,947,8,71,3,71,949,8,71,1,72,1,72,3,72,953,8,
        72,1,72,1,72,1,73,1,73,5,73,959,8,73,10,73,12,73,962,9,73,1,73,1,
        73,1,74,1,74,1,74,5,74,969,8,74,10,74,12,74,972,9,74,1,75,1,75,1,
        75,1,75,3,75,978,8,75,1,76,1,76,1,76,1,76,3,76,984,8,76,3,76,986,
        8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,3,77,1015,8,77,1,77,1,77,3,77,1019,8,77,1,78,1,78,1,79,
        1,79,1,79,1,79,5,79,1027,8,79,10,79,12,79,1030,9,79,3,79,1032,8,
        79,1,79,3,79,1035,8,79,1,79,1,79,1,79,0,1,132,80,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,0,12,2,0,11,
        11,13,20,1,0,22,29,2,0,1,1,50,50,2,0,51,52,71,72,1,0,66,67,1,0,53,
        55,1,0,51,52,1,0,58,61,1,0,56,57,2,0,62,62,73,83,1,0,59,61,2,0,35,
        37,97,100,1132,0,161,1,0,0,0,2,176,1,0,0,0,4,180,1,0,0,0,6,188,1,
        0,0,0,8,199,1,0,0,0,10,204,1,0,0,0,12,237,1,0,0,0,14,258,1,0,0,0,
        16,267,1,0,0,0,18,272,1,0,0,0,20,291,1,0,0,0,22,312,1,0,0,0,24,320,
        1,0,0,0,26,327,1,0,0,0,28,334,1,0,0,0,30,345,1,0,0,0,32,350,1,0,
        0,0,34,363,1,0,0,0,36,368,1,0,0,0,38,388,1,0,0,0,40,395,1,0,0,0,
        42,400,1,0,0,0,44,421,1,0,0,0,46,450,1,0,0,0,48,454,1,0,0,0,50,472,
        1,0,0,0,52,474,1,0,0,0,54,488,1,0,0,0,56,490,1,0,0,0,58,507,1,0,
        0,0,60,509,1,0,0,0,62,517,1,0,0,0,64,526,1,0,0,0,66,538,1,0,0,0,
        68,543,1,0,0,0,70,545,1,0,0,0,72,561,1,0,0,0,74,572,1,0,0,0,76,578,
        1,0,0,0,78,586,1,0,0,0,80,594,1,0,0,0,82,606,1,0,0,0,84,630,1,0,
        0,0,86,632,1,0,0,0,88,646,1,0,0,0,90,661,1,0,0,0,92,665,1,0,0,0,
        94,667,1,0,0,0,96,669,1,0,0,0,98,675,1,0,0,0,100,681,1,0,0,0,102,
        689,1,0,0,0,104,693,1,0,0,0,106,699,1,0,0,0,108,710,1,0,0,0,110,
        719,1,0,0,0,112,725,1,0,0,0,114,733,1,0,0,0,116,735,1,0,0,0,118,
        741,1,0,0,0,120,755,1,0,0,0,122,757,1,0,0,0,124,759,1,0,0,0,126,
        771,1,0,0,0,128,778,1,0,0,0,130,784,1,0,0,0,132,801,1,0,0,0,134,
        896,1,0,0,0,136,903,1,0,0,0,138,905,1,0,0,0,140,911,1,0,0,0,142,
        948,1,0,0,0,144,950,1,0,0,0,146,956,1,0,0,0,148,965,1,0,0,0,150,
        973,1,0,0,0,152,985,1,0,0,0,154,1018,1,0,0,0,156,1020,1,0,0,0,158,
        1022,1,0,0,0,160,162,3,2,1,0,161,160,1,0,0,0,161,162,1,0,0,0,162,
        166,1,0,0,0,163,165,3,4,2,0,164,163,1,0,0,0,165,168,1,0,0,0,166,
        164,1,0,0,0,166,167,1,0,0,0,167,170,1,0,0,0,168,166,1,0,0,0,169,
        171,3,8,4,0,170,169,1,0,0,0,171,172,1,0,0,0,172,170,1,0,0,0,172,
        173,1,0,0,0,173,174,1,0,0,0,174,175,5,0,0,1,175,1,1,0,0,0,176,177,
        5,7,0,0,177,178,3,6,3,0,178,179,5,91,0,0,179,3,1,0,0,0,180,181,5,
        6,0,0,181,184,3,6,3,0,182,183,5,63,0,0,183,185,5,53,0,0,184,182,
        1,0,0,0,184,185,1,0,0,0,185,186,1,0,0,0,186,187,5,91,0,0,187,5,1,
        0,0,0,188,193,5,96,0,0,189,190,5,63,0,0,190,192,5,96,0,0,191,189,
        1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,7,1,
        0,0,0,195,193,1,0,0,0,196,200,3,10,5,0,197,200,3,20,10,0,198,200,
        3,12,6,0,199,196,1,0,0,0,199,197,1,0,0,0,199,198,1,0,0,0,200,9,1,
        0,0,0,201,203,3,62,31,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,
        1,0,0,0,204,205,1,0,0,0,205,210,1,0,0,0,206,204,1,0,0,0,207,209,
        3,46,23,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,
        1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,213,214,5,8,0,0,214,216,
        5,96,0,0,215,217,3,28,14,0,216,215,1,0,0,0,216,217,1,0,0,0,217,220,
        1,0,0,0,218,219,5,1,0,0,219,221,3,50,25,0,220,218,1,0,0,0,220,221,
        1,0,0,0,221,223,1,0,0,0,222,224,3,14,7,0,223,222,1,0,0,0,223,224,
        1,0,0,0,224,225,1,0,0,0,225,229,5,84,0,0,226,228,3,34,17,0,227,226,
        1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,
        1,0,0,0,231,229,1,0,0,0,232,233,5,85,0,0,233,11,1,0,0,0,234,236,
        3,46,23,0,235,234,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,
        1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,0,240,241,5,9,0,0,241,243,
        5,96,0,0,242,244,3,28,14,0,243,242,1,0,0,0,243,244,1,0,0,0,244,247,
        1,0,0,0,245,246,5,1,0,0,246,248,3,60,30,0,247,245,1,0,0,0,247,248,
        1,0,0,0,248,249,1,0,0,0,249,253,5,84,0,0,250,252,3,16,8,0,251,250,
        1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,
        1,0,0,0,255,253,1,0,0,0,256,257,5,85,0,0,257,13,1,0,0,0,258,259,
        5,10,0,0,259,260,3,60,30,0,260,15,1,0,0,0,261,268,3,36,18,0,262,
        268,3,18,9,0,263,268,3,10,5,0,264,268,3,12,6,0,265,268,3,20,10,0,
        266,268,5,91,0,0,267,261,1,0,0,0,267,262,1,0,0,0,267,263,1,0,0,0,
        267,264,1,0,0,0,267,265,1,0,0,0,267,266,1,0,0,0,268,17,1,0,0,0,269,
        271,3,46,23,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,
        273,1,0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,276,3,48,24,0,276,
        277,5,96,0,0,277,279,5,86,0,0,278,280,3,72,36,0,279,278,1,0,0,0,
        279,280,1,0,0,0,280,281,1,0,0,0,281,284,5,87,0,0,282,283,5,45,0,
        0,283,285,3,78,39,0,284,282,1,0,0,0,284,285,1,0,0,0,285,286,1,0,
        0,0,286,287,5,91,0,0,287,19,1,0,0,0,288,290,3,46,23,0,289,288,1,
        0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,
        0,0,0,293,291,1,0,0,0,294,295,5,12,0,0,295,298,5,96,0,0,296,297,
        5,10,0,0,297,299,3,60,30,0,298,296,1,0,0,0,298,299,1,0,0,0,299,300,
        1,0,0,0,300,305,5,84,0,0,301,303,3,22,11,0,302,304,5,90,0,0,303,
        302,1,0,0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,301,1,0,0,0,305,
        306,1,0,0,0,306,308,1,0,0,0,307,309,3,26,13,0,308,307,1,0,0,0,308,
        309,1,0,0,0,309,310,1,0,0,0,310,311,5,85,0,0,311,21,1,0,0,0,312,
        317,3,24,12,0,313,314,5,90,0,0,314,316,3,24,12,0,315,313,1,0,0,0,
        316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,23,1,0,0,0,319,
        317,1,0,0,0,320,322,5,96,0,0,321,323,3,144,72,0,322,321,1,0,0,0,
        322,323,1,0,0,0,323,325,1,0,0,0,324,326,3,146,73,0,325,324,1,0,0,
        0,325,326,1,0,0,0,326,25,1,0,0,0,327,331,5,91,0,0,328,330,3,34,17,
        0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,
        0,332,27,1,0,0,0,333,331,1,0,0,0,334,335,5,58,0,0,335,340,3,30,15,
        0,336,337,5,90,0,0,337,339,3,30,15,0,338,336,1,0,0,0,339,342,1,0,
        0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,340,1,0,
        0,0,343,344,5,59,0,0,344,29,1,0,0,0,345,348,5,96,0,0,346,347,5,1,
        0,0,347,349,3,32,16,0,348,346,1,0,0,0,348,349,1,0,0,0,349,31,1,0,
        0,0,350,355,3,50,25,0,351,352,5,68,0,0,352,354,3,50,25,0,353,351,
        1,0,0,0,354,357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,33,1,
        0,0,0,357,355,1,0,0,0,358,364,3,36,18,0,359,364,3,44,22,0,360,364,
        3,42,21,0,361,364,3,10,5,0,362,364,3,20,10,0,363,358,1,0,0,0,363,
        359,1,0,0,0,363,360,1,0,0,0,363,361,1,0,0,0,363,362,1,0,0,0,364,
        35,1,0,0,0,365,367,3,62,31,0,366,365,1,0,0,0,367,370,1,0,0,0,368,
        366,1,0,0,0,368,369,1,0,0,0,369,374,1,0,0,0,370,368,1,0,0,0,371,
        373,3,46,23,0,372,371,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,
        375,1,0,0,0,375,377,1,0,0,0,376,374,1,0,0,0,377,378,3,50,25,0,378,
        383,3,38,19,0,379,380,5,90,0,0,380,382,3,38,19,0,381,379,1,0,0,0,
        382,385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,
        385,383,1,0,0,0,386,387,5,91,0,0,387,37,1,0,0,0,388,391,5,96,0,0,
        389,390,5,62,0,0,390,392,3,40,20,0,391,389,1,0,0,0,391,392,1,0,0,
        0,392,39,1,0,0,0,393,396,3,132,66,0,394,396,3,158,79,0,395,393,1,
        0,0,0,395,394,1,0,0,0,396,41,1,0,0,0,397,399,3,46,23,0,398,397,1,
        0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,0,401,403,1,
        0,0,0,402,400,1,0,0,0,403,404,5,96,0,0,404,406,5,86,0,0,405,407,
        3,72,36,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,
        5,87,0,0,409,413,5,84,0,0,410,412,3,82,41,0,411,410,1,0,0,0,412,
        415,1,0,0,0,413,411,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,
        413,1,0,0,0,416,417,5,85,0,0,417,43,1,0,0,0,418,420,3,62,31,0,419,
        418,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
        427,1,0,0,0,423,421,1,0,0,0,424,426,3,46,23,0,425,424,1,0,0,0,426,
        429,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,430,1,0,0,0,429,
        427,1,0,0,0,430,431,3,48,24,0,431,432,5,96,0,0,432,434,5,86,0,0,
        433,435,3,72,36,0,434,433,1,0,0,0,434,435,1,0,0,0,435,436,1,0,0,
        0,436,439,5,87,0,0,437,438,5,45,0,0,438,440,3,78,39,0,439,437,1,
        0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,445,5,84,0,0,442,444,3,
        82,41,0,443,442,1,0,0,0,444,447,1,0,0,0,445,443,1,0,0,0,445,446,
        1,0,0,0,446,448,1,0,0,0,447,445,1,0,0,0,448,449,5,85,0,0,449,45,
        1,0,0,0,450,451,7,0,0,0,451,47,1,0,0,0,452,455,3,50,25,0,453,455,
        5,21,0,0,454,452,1,0,0,0,454,453,1,0,0,0,455,49,1,0,0,0,456,461,
        3,54,27,0,457,458,5,88,0,0,458,460,5,89,0,0,459,457,1,0,0,0,460,
        463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,473,1,0,0,0,463,
        461,1,0,0,0,464,469,3,52,26,0,465,466,5,88,0,0,466,468,5,89,0,0,
        467,465,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,
        470,473,1,0,0,0,471,469,1,0,0,0,472,456,1,0,0,0,472,464,1,0,0,0,
        473,51,1,0,0,0,474,476,5,96,0,0,475,477,3,56,28,0,476,475,1,0,0,
        0,476,477,1,0,0,0,477,485,1,0,0,0,478,479,5,63,0,0,479,481,5,96,
        0,0,480,482,3,56,28,0,481,480,1,0,0,0,481,482,1,0,0,0,482,484,1,
        0,0,0,483,478,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,
        0,0,0,486,53,1,0,0,0,487,485,1,0,0,0,488,489,7,1,0,0,489,55,1,0,
        0,0,490,491,5,58,0,0,491,496,3,58,29,0,492,493,5,90,0,0,493,495,
        3,58,29,0,494,492,1,0,0,0,495,498,1,0,0,0,496,494,1,0,0,0,496,497,
        1,0,0,0,497,499,1,0,0,0,498,496,1,0,0,0,499,500,5,59,0,0,500,57,
        1,0,0,0,501,508,3,50,25,0,502,505,5,92,0,0,503,504,7,2,0,0,504,506,
        3,50,25,0,505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,501,
        1,0,0,0,507,502,1,0,0,0,508,59,1,0,0,0,509,514,3,50,25,0,510,511,
        5,90,0,0,511,513,3,50,25,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,
        1,0,0,0,514,515,1,0,0,0,515,61,1,0,0,0,516,514,1,0,0,0,517,518,5,
        95,0,0,518,524,3,6,3,0,519,521,5,86,0,0,520,522,3,64,32,0,521,520,
        1,0,0,0,521,522,1,0,0,0,522,523,1,0,0,0,523,525,5,87,0,0,524,519,
        1,0,0,0,524,525,1,0,0,0,525,63,1,0,0,0,526,531,3,66,33,0,527,528,
        5,90,0,0,528,530,3,66,33,0,529,527,1,0,0,0,530,533,1,0,0,0,531,529,
        1,0,0,0,531,532,1,0,0,0,532,65,1,0,0,0,533,531,1,0,0,0,534,535,5,
        96,0,0,535,536,5,62,0,0,536,539,3,68,34,0,537,539,3,68,34,0,538,
        534,1,0,0,0,538,537,1,0,0,0,539,67,1,0,0,0,540,544,3,132,66,0,541,
        544,3,62,31,0,542,544,3,70,35,0,543,540,1,0,0,0,543,541,1,0,0,0,
        543,542,1,0,0,0,544,69,1,0,0,0,545,554,5,84,0,0,546,551,3,68,34,
        0,547,548,5,90,0,0,548,550,3,68,34,0,549,547,1,0,0,0,550,553,1,0,
        0,0,551,549,1,0,0,0,551,552,1,0,0,0,552,555,1,0,0,0,553,551,1,0,
        0,0,554,546,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,558,5,90,
        0,0,557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,560,5,85,
        0,0,560,71,1,0,0,0,561,566,3,74,37,0,562,563,5,90,0,0,563,565,3,
        74,37,0,564,562,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,
        1,0,0,0,567,73,1,0,0,0,568,566,1,0,0,0,569,571,3,62,31,0,570,569,
        1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,575,
        1,0,0,0,574,572,1,0,0,0,575,576,3,50,25,0,576,577,3,76,38,0,577,
        75,1,0,0,0,578,583,5,96,0,0,579,580,5,88,0,0,580,582,5,89,0,0,581,
        579,1,0,0,0,582,585,1,0,0,0,583,581,1,0,0,0,583,584,1,0,0,0,584,
        77,1,0,0,0,585,583,1,0,0,0,586,591,3,6,3,0,587,588,5,90,0,0,588,
        590,3,6,3,0,589,587,1,0,0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,
        592,1,0,0,0,592,79,1,0,0,0,593,591,1,0,0,0,594,598,5,84,0,0,595,
        597,3,82,41,0,596,595,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,
        599,1,0,0,0,599,601,1,0,0,0,600,598,1,0,0,0,601,602,5,85,0,0,602,
        81,1,0,0,0,603,607,3,106,53,0,604,607,3,84,42,0,605,607,3,8,4,0,
        606,603,1,0,0,0,606,604,1,0,0,0,606,605,1,0,0,0,607,83,1,0,0,0,608,
        631,3,80,40,0,609,631,3,108,54,0,610,631,3,110,55,0,611,631,3,112,
        56,0,612,631,3,124,62,0,613,631,3,128,64,0,614,631,3,130,65,0,615,
        631,3,86,43,0,616,631,3,96,48,0,617,631,3,98,49,0,618,631,3,100,
        50,0,619,631,3,102,51,0,620,631,3,104,52,0,621,622,5,46,0,0,622,
        625,3,132,66,0,623,624,5,93,0,0,624,626,3,132,66,0,625,623,1,0,0,
        0,625,626,1,0,0,0,626,627,1,0,0,0,627,628,5,91,0,0,628,631,1,0,0,
        0,629,631,5,91,0,0,630,608,1,0,0,0,630,609,1,0,0,0,630,610,1,0,0,
        0,630,611,1,0,0,0,630,612,1,0,0,0,630,613,1,0,0,0,630,614,1,0,0,
        0,630,615,1,0,0,0,630,616,1,0,0,0,630,617,1,0,0,0,630,618,1,0,0,
        0,630,619,1,0,0,0,630,620,1,0,0,0,630,621,1,0,0,0,630,629,1,0,0,
        0,631,85,1,0,0,0,632,633,5,38,0,0,633,634,5,86,0,0,634,635,3,132,
        66,0,635,636,5,87,0,0,636,640,5,84,0,0,637,639,3,88,44,0,638,637,
        1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,643,
        1,0,0,0,642,640,1,0,0,0,643,644,5,85,0,0,644,87,1,0,0,0,645,647,
        3,90,45,0,646,645,1,0,0,0,647,648,1,0,0,0,648,646,1,0,0,0,648,649,
        1,0,0,0,649,653,1,0,0,0,650,652,3,82,41,0,651,650,1,0,0,0,652,655,
        1,0,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,89,1,0,0,0,655,653,1,
        0,0,0,656,657,5,39,0,0,657,662,3,92,46,0,658,659,5,39,0,0,659,662,
        3,94,47,0,660,662,5,40,0,0,661,656,1,0,0,0,661,658,1,0,0,0,661,660,
        1,0,0,0,662,663,1,0,0,0,663,664,5,93,0,0,664,91,1,0,0,0,665,666,
        3,132,66,0,666,93,1,0,0,0,667,668,5,96,0,0,668,95,1,0,0,0,669,671,
        5,41,0,0,670,672,5,96,0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,
        1,0,0,0,673,674,5,91,0,0,674,97,1,0,0,0,675,677,5,42,0,0,676,678,
        5,96,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,680,
        5,91,0,0,680,99,1,0,0,0,681,682,5,43,0,0,682,683,3,84,42,0,683,684,
        5,32,0,0,684,685,5,86,0,0,685,686,3,132,66,0,686,687,5,87,0,0,687,
        688,5,91,0,0,688,101,1,0,0,0,689,690,5,44,0,0,690,691,3,132,66,0,
        691,692,5,91,0,0,692,103,1,0,0,0,693,694,5,18,0,0,694,695,5,86,0,
        0,695,696,3,132,66,0,696,697,5,87,0,0,697,698,3,80,40,0,698,105,
        1,0,0,0,699,700,3,50,25,0,700,705,3,38,19,0,701,702,5,90,0,0,702,
        704,3,38,19,0,703,701,1,0,0,0,704,707,1,0,0,0,705,703,1,0,0,0,705,
        706,1,0,0,0,706,708,1,0,0,0,707,705,1,0,0,0,708,709,5,91,0,0,709,
        107,1,0,0,0,710,711,5,30,0,0,711,712,5,86,0,0,712,713,3,132,66,0,
        713,714,5,87,0,0,714,717,3,84,42,0,715,716,5,31,0,0,716,718,3,84,
        42,0,717,715,1,0,0,0,717,718,1,0,0,0,718,109,1,0,0,0,719,720,5,32,
        0,0,720,721,5,86,0,0,721,722,3,132,66,0,722,723,5,87,0,0,723,724,
        3,84,42,0,724,111,1,0,0,0,725,726,5,33,0,0,726,727,5,86,0,0,727,
        728,3,114,57,0,728,729,5,87,0,0,729,730,3,84,42,0,730,113,1,0,0,
        0,731,734,3,116,58,0,732,734,3,118,59,0,733,731,1,0,0,0,733,732,
        1,0,0,0,734,115,1,0,0,0,735,736,3,50,25,0,736,737,3,76,38,0,737,
        738,5,93,0,0,738,739,3,132,66,0,739,117,1,0,0,0,740,742,3,120,60,
        0,741,740,1,0,0,0,741,742,1,0,0,0,742,743,1,0,0,0,743,745,5,91,0,
        0,744,746,3,132,66,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,
        0,0,747,749,5,91,0,0,748,750,3,122,61,0,749,748,1,0,0,0,749,750,
        1,0,0,0,750,119,1,0,0,0,751,756,3,106,53,0,752,753,3,148,74,0,753,
        754,5,91,0,0,754,756,1,0,0,0,755,751,1,0,0,0,755,752,1,0,0,0,756,
        121,1,0,0,0,757,758,3,148,74,0,758,123,1,0,0,0,759,760,5,2,0,0,760,
        764,3,80,40,0,761,763,3,126,63,0,762,761,1,0,0,0,763,766,1,0,0,0,
        764,762,1,0,0,0,764,765,1,0,0,0,765,769,1,0,0,0,766,764,1,0,0,0,
        767,768,5,3,0,0,768,770,3,80,40,0,769,767,1,0,0,0,769,770,1,0,0,
        0,770,125,1,0,0,0,771,772,5,4,0,0,772,773,5,86,0,0,773,774,3,50,
        25,0,774,775,5,96,0,0,775,776,5,87,0,0,776,777,3,80,40,0,777,127,
        1,0,0,0,778,780,5,34,0,0,779,781,3,132,66,0,780,779,1,0,0,0,780,
        781,1,0,0,0,781,782,1,0,0,0,782,783,5,91,0,0,783,129,1,0,0,0,784,
        785,3,132,66,0,785,786,5,91,0,0,786,131,1,0,0,0,787,788,6,66,-1,
        0,788,802,3,154,77,0,789,790,5,47,0,0,790,802,3,134,67,0,791,792,
        5,86,0,0,792,793,3,50,25,0,793,794,5,87,0,0,794,795,3,132,66,18,
        795,802,1,0,0,0,796,797,7,3,0,0,797,802,3,132,66,4,798,799,7,4,0,
        0,799,802,3,132,66,3,800,802,3,150,75,0,801,787,1,0,0,0,801,789,
        1,0,0,0,801,791,1,0,0,0,801,796,1,0,0,0,801,798,1,0,0,0,801,800,
        1,0,0,0,802,893,1,0,0,0,803,804,10,17,0,0,804,805,7,5,0,0,805,892,
        3,132,66,18,806,807,10,16,0,0,807,808,7,6,0,0,808,892,3,132,66,17,
        809,810,10,15,0,0,810,811,7,7,0,0,811,892,3,132,66,16,812,813,10,
        13,0,0,813,814,7,8,0,0,814,892,3,132,66,14,815,816,10,12,0,0,816,
        817,5,68,0,0,817,892,3,132,66,13,818,819,10,11,0,0,819,820,5,70,
        0,0,820,892,3,132,66,12,821,822,10,10,0,0,822,823,5,69,0,0,823,892,
        3,132,66,11,824,825,10,9,0,0,825,826,5,64,0,0,826,892,3,132,66,10,
        827,828,10,8,0,0,828,829,5,65,0,0,829,892,3,132,66,9,830,831,10,
        7,0,0,831,832,5,92,0,0,832,833,3,132,66,0,833,834,5,93,0,0,834,835,
        3,132,66,8,835,892,1,0,0,0,836,837,10,6,0,0,837,838,7,9,0,0,838,
        892,3,132,66,7,839,843,10,5,0,0,840,841,5,58,0,0,841,844,4,66,12,
        0,842,844,7,10,0,0,843,840,1,0,0,0,843,842,1,0,0,0,844,845,1,0,0,
        0,845,892,3,132,66,6,846,847,10,26,0,0,847,848,5,88,0,0,848,849,
        3,132,66,0,849,850,5,89,0,0,850,892,1,0,0,0,851,852,10,25,0,0,852,
        853,5,63,0,0,853,854,5,96,0,0,854,856,5,86,0,0,855,857,3,148,74,
        0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,1,0,0,0,858,892,5,87,0,
        0,859,860,10,24,0,0,860,862,5,86,0,0,861,863,3,148,74,0,862,861,
        1,0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,892,5,87,0,0,865,866,
        10,23,0,0,866,867,5,63,0,0,867,892,5,96,0,0,868,869,10,22,0,0,869,
        870,5,63,0,0,870,892,5,49,0,0,871,872,10,21,0,0,872,873,5,63,0,0,
        873,875,5,47,0,0,874,876,3,138,69,0,875,874,1,0,0,0,875,876,1,0,
        0,0,876,877,1,0,0,0,877,878,5,96,0,0,878,880,3,144,72,0,879,881,
        3,146,73,0,880,879,1,0,0,0,880,881,1,0,0,0,881,892,1,0,0,0,882,883,
        10,20,0,0,883,884,5,63,0,0,884,885,5,50,0,0,885,892,3,152,76,0,886,
        887,10,14,0,0,887,888,5,48,0,0,888,892,3,50,25,0,889,890,10,2,0,
        0,890,892,7,4,0,0,891,803,1,0,0,0,891,806,1,0,0,0,891,809,1,0,0,
        0,891,812,1,0,0,0,891,815,1,0,0,0,891,818,1,0,0,0,891,821,1,0,0,
        0,891,824,1,0,0,0,891,827,1,0,0,0,891,830,1,0,0,0,891,836,1,0,0,
        0,891,839,1,0,0,0,891,846,1,0,0,0,891,851,1,0,0,0,891,859,1,0,0,
        0,891,865,1,0,0,0,891,868,1,0,0,0,891,871,1,0,0,0,891,882,1,0,0,
        0,891,886,1,0,0,0,891,889,1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,
        0,893,894,1,0,0,0,894,133,1,0,0,0,895,893,1,0,0,0,896,899,3,136,
        68,0,897,900,3,140,70,0,898,900,3,142,71,0,899,897,1,0,0,0,899,898,
        1,0,0,0,900,135,1,0,0,0,901,904,3,54,27,0,902,904,3,52,26,0,903,
        901,1,0,0,0,903,902,1,0,0,0,904,137,1,0,0,0,905,907,5,58,0,0,906,
        908,3,60,30,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,
        910,5,59,0,0,910,139,1,0,0,0,911,939,5,88,0,0,912,917,5,89,0,0,913,
        914,5,88,0,0,914,916,5,89,0,0,915,913,1,0,0,0,916,919,1,0,0,0,917,
        915,1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,917,1,0,0,0,920,
        940,3,158,79,0,921,922,3,132,66,0,922,929,5,89,0,0,923,924,5,88,
        0,0,924,925,3,132,66,0,925,926,5,89,0,0,926,928,1,0,0,0,927,923,
        1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,936,
        1,0,0,0,931,929,1,0,0,0,932,933,5,88,0,0,933,935,5,89,0,0,934,932,
        1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,937,940,
        1,0,0,0,938,936,1,0,0,0,939,912,1,0,0,0,939,921,1,0,0,0,940,141,
        1,0,0,0,941,943,3,138,69,0,942,941,1,0,0,0,942,943,1,0,0,0,943,949,
        1,0,0,0,944,949,3,144,72,0,945,947,3,146,73,0,946,945,1,0,0,0,946,
        947,1,0,0,0,947,949,1,0,0,0,948,942,1,0,0,0,948,944,1,0,0,0,948,
        946,1,0,0,0,949,143,1,0,0,0,950,952,5,86,0,0,951,953,3,148,74,0,
        952,951,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,5,87,0,0,
        955,145,1,0,0,0,956,960,5,84,0,0,957,959,3,34,17,0,958,957,1,0,0,
        0,959,962,1,0,0,0,960,958,1,0,0,0,960,961,1,0,0,0,961,963,1,0,0,
        0,962,960,1,0,0,0,963,964,5,85,0,0,964,147,1,0,0,0,965,970,3,132,
        66,0,966,967,5,90,0,0,967,969,3,132,66,0,968,966,1,0,0,0,969,972,
        1,0,0,0,970,968,1,0,0,0,970,971,1,0,0,0,971,149,1,0,0,0,972,970,
        1,0,0,0,973,974,3,72,36,0,974,977,5,5,0,0,975,978,3,132,66,0,976,
        978,3,80,40,0,977,975,1,0,0,0,977,976,1,0,0,0,978,151,1,0,0,0,979,
        986,3,144,72,0,980,981,5,63,0,0,981,983,5,96,0,0,982,984,3,144,72,
        0,983,982,1,0,0,0,983,984,1,0,0,0,984,986,1,0,0,0,985,979,1,0,0,
        0,985,980,1,0,0,0,986,153,1,0,0,0,987,988,5,86,0,0,988,989,3,132,
        66,0,989,990,5,87,0,0,990,1019,1,0,0,0,991,1019,5,49,0,0,992,1019,
        5,50,0,0,993,1019,3,156,78,0,994,1019,5,96,0,0,995,996,3,52,26,0,
        996,997,5,63,0,0,997,998,5,49,0,0,998,1019,1,0,0,0,999,1000,3,52,
        26,0,1000,1001,5,63,0,0,1001,1002,5,8,0,0,1002,1019,1,0,0,0,1003,
        1004,3,54,27,0,1004,1005,5,63,0,0,1005,1006,5,8,0,0,1006,1019,1,
        0,0,0,1007,1008,5,21,0,0,1008,1009,5,63,0,0,1009,1019,5,8,0,0,1010,
        1011,3,56,28,0,1011,1012,5,96,0,0,1012,1014,5,86,0,0,1013,1015,3,
        148,74,0,1014,1013,1,0,0,0,1014,1015,1,0,0,0,1015,1016,1,0,0,0,1016,
        1017,5,87,0,0,1017,1019,1,0,0,0,1018,987,1,0,0,0,1018,991,1,0,0,
        0,1018,992,1,0,0,0,1018,993,1,0,0,0,1018,994,1,0,0,0,1018,995,1,
        0,0,0,1018,999,1,0,0,0,1018,1003,1,0,0,0,1018,1007,1,0,0,0,1018,
        1010,1,0,0,0,1019,155,1,0,0,0,1020,1021,7,11,0,0,1021,157,1,0,0,
        0,1022,1031,5,84,0,0,1023,1028,3,40,20,0,1024,1025,5,90,0,0,1025,
        1027,3,40,20,0,1026,1024,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,
        0,0,1028,1029,1,0,0,0,1029,1032,1,0,0,0,1030,1028,1,0,0,0,1031,1023,
        1,0,0,0,1031,1032,1,0,0,0,1032,1034,1,0,0,0,1033,1035,5,90,0,0,1034,
        1033,1,0,0,0,1034,1035,1,0,0,0,1035,1036,1,0,0,0,1036,1037,5,85,
        0,0,1037,159,1,0,0,0,118,161,166,172,184,193,199,204,210,216,220,
        223,229,237,243,247,253,267,272,279,284,291,298,303,305,308,317,
        322,325,331,340,348,355,363,368,374,383,391,395,400,406,413,421,
        427,434,439,445,454,461,469,472,476,481,485,496,505,507,514,521,
        524,531,538,543,551,554,557,566,572,583,591,598,606,625,630,640,
        648,653,661,671,677,705,717,733,741,745,749,755,764,769,780,801,
        843,856,862,875,880,891,893,899,903,907,917,929,936,939,942,946,
        948,952,960,970,977,983,985,1014,1018,1028,1031,1034
    ]

class SimpleJavaParser ( Parser ):

    grammarFileName = "SimpleJava.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'extends'", "'try'", "'finally'", "'catch'", 
                     "'->'", "'import'", "'package'", "'class'", "'interface'", 
                     "'implements'", "'public'", "'enum'", "'private'", 
                     "'protected'", "'static'", "'final'", "'abstract'", 
                     "'synchronized'", "'native'", "'strictfp'", "'void'", 
                     "'boolean'", "'char'", "'byte'", "'short'", "'int'", 
                     "'long'", "'float'", "'double'", "'if'", "'else'", 
                     "'while'", "'for'", "'return'", "'true'", "'false'", 
                     "'null'", "'switch'", "'case'", "'default'", "'break'", 
                     "'continue'", "'do'", "'throw'", "'throws'", "'assert'", 
                     "'new'", "'instanceof'", "'this'", "'super'", "'+'", 
                     "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", 
                     "'>'", "'<='", "'>='", "'='", "'.'", "'&&'", "'||'", 
                     "'++'", "'--'", "'&'", "'|'", "'^'", "'~'", "'!'", 
                     "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
                     "'^='", "'<<='", "'>>='", "'>>>='", "'{'", "'}'", "'('", 
                     "')'", "'['", "']'", "','", "';'", "'?'", "':'", "'...'", 
                     "'@'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "IMPORT", "PACKAGE", "CLASS", 
                      "INTERFACE", "IMPLEMENTS", "PUBLIC", "ENUM", "PRIVATE", 
                      "PROTECTED", "STATIC", "FINAL", "ABSTRACT", "SYNCHRONIZED", 
                      "NATIVE", "STRICTFP", "VOID", "BOOLEAN", "CHAR", "BYTE", 
                      "SHORT", "INT", "LONG", "FLOAT", "DOUBLE", "IF", "ELSE", 
                      "WHILE", "FOR", "RETURN", "TRUE", "FALSE", "NULL", 
                      "SWITCH", "CASE", "DEFAULT", "BREAK", "CONTINUE", 
                      "DO", "THROW", "THROWS", "ASSERT", "NEW", "INSTANCEOF", 
                      "THIS", "SUPER", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
                      "EQUAL", "NOTEQUAL", "LT", "GT", "LE", "GE", "ASSIGN", 
                      "DOT", "AND", "OR", "INC", "DEC", "BITAND", "BITOR", 
                      "CARET", "TILDE", "BANG", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "OR_ASSIGN", "XOR_ASSIGN", "LSHIFT_ASSIGN", "RSHIFT_ASSIGN", 
                      "URSHIFT_ASSIGN", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
                      "LBRACK", "RBRACK", "COMMA", "SEMI", "QUESTION", "COLON", 
                      "ELLIPSIS", "AT", "IDENTIFIER", "DecimalIntegerLiteral", 
                      "FloatingPointLiteral", "StringLiteral", "CharacterLiteral", 
                      "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_compilationUnit = 0
    RULE_packageDeclaration = 1
    RULE_importDeclaration = 2
    RULE_qualifiedName = 3
    RULE_typeDeclaration = 4
    RULE_classDeclaration = 5
    RULE_interfaceDeclaration = 6
    RULE_implementsClause = 7
    RULE_interfaceMemberDeclaration = 8
    RULE_interfaceMethodDeclaration = 9
    RULE_enumDeclaration = 10
    RULE_enumConstantList = 11
    RULE_enumConstant = 12
    RULE_enumBodyDeclarations = 13
    RULE_typeParameters = 14
    RULE_typeParameter = 15
    RULE_typeBound = 16
    RULE_memberDeclaration = 17
    RULE_fieldDeclaration = 18
    RULE_variableDeclarator = 19
    RULE_variableInitializer = 20
    RULE_constructorDeclaration = 21
    RULE_methodDeclaration = 22
    RULE_modifier = 23
    RULE_returnType = 24
    RULE_type = 25
    RULE_classOrInterfaceType = 26
    RULE_primitiveType = 27
    RULE_typeArguments = 28
    RULE_typeArgument = 29
    RULE_typeList = 30
    RULE_annotation = 31
    RULE_elementValuePairList = 32
    RULE_elementValuePair = 33
    RULE_elementValue = 34
    RULE_elementValueArrayInitializer = 35
    RULE_formalParameters = 36
    RULE_formalParameter = 37
    RULE_variableDeclaratorId = 38
    RULE_qualifiedNameList = 39
    RULE_block = 40
    RULE_blockStatement = 41
    RULE_statement = 42
    RULE_switchStatement = 43
    RULE_switchBlockStatementGroup = 44
    RULE_switchLabel = 45
    RULE_constantExpression = 46
    RULE_enumConstantName = 47
    RULE_breakStatement = 48
    RULE_continueStatement = 49
    RULE_doWhileStatement = 50
    RULE_throwStatement = 51
    RULE_synchronizedStatement = 52
    RULE_localVariableDeclarationStatement = 53
    RULE_ifStatement = 54
    RULE_whileStatement = 55
    RULE_forStatement = 56
    RULE_forControl = 57
    RULE_enhancedForControl = 58
    RULE_basicForControl = 59
    RULE_forInit = 60
    RULE_forUpdate = 61
    RULE_tryStatement = 62
    RULE_catchClause = 63
    RULE_returnStatement = 64
    RULE_expressionStatement = 65
    RULE_expression = 66
    RULE_creator = 67
    RULE_createdName = 68
    RULE_typeArgumentsOrDiamond = 69
    RULE_arrayCreatorRest = 70
    RULE_classCreatorRest = 71
    RULE_arguments = 72
    RULE_classBody = 73
    RULE_expressionList = 74
    RULE_lambdaExpression = 75
    RULE_superSuffix = 76
    RULE_primary = 77
    RULE_literal = 78
    RULE_arrayInitializer = 79

    ruleNames =  [ "compilationUnit", "packageDeclaration", "importDeclaration", 
                   "qualifiedName", "typeDeclaration", "classDeclaration", 
                   "interfaceDeclaration", "implementsClause", "interfaceMemberDeclaration", 
                   "interfaceMethodDeclaration", "enumDeclaration", "enumConstantList", 
                   "enumConstant", "enumBodyDeclarations", "typeParameters", 
                   "typeParameter", "typeBound", "memberDeclaration", "fieldDeclaration", 
                   "variableDeclarator", "variableInitializer", "constructorDeclaration", 
                   "methodDeclaration", "modifier", "returnType", "type", 
                   "classOrInterfaceType", "primitiveType", "typeArguments", 
                   "typeArgument", "typeList", "annotation", "elementValuePairList", 
                   "elementValuePair", "elementValue", "elementValueArrayInitializer", 
                   "formalParameters", "formalParameter", "variableDeclaratorId", 
                   "qualifiedNameList", "block", "blockStatement", "statement", 
                   "switchStatement", "switchBlockStatementGroup", "switchLabel", 
                   "constantExpression", "enumConstantName", "breakStatement", 
                   "continueStatement", "doWhileStatement", "throwStatement", 
                   "synchronizedStatement", "localVariableDeclarationStatement", 
                   "ifStatement", "whileStatement", "forStatement", "forControl", 
                   "enhancedForControl", "basicForControl", "forInit", "forUpdate", 
                   "tryStatement", "catchClause", "returnStatement", "expressionStatement", 
                   "expression", "creator", "createdName", "typeArgumentsOrDiamond", 
                   "arrayCreatorRest", "classCreatorRest", "arguments", 
                   "classBody", "expressionList", "lambdaExpression", "superSuffix", 
                   "primary", "literal", "arrayInitializer" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    IMPORT=6
    PACKAGE=7
    CLASS=8
    INTERFACE=9
    IMPLEMENTS=10
    PUBLIC=11
    ENUM=12
    PRIVATE=13
    PROTECTED=14
    STATIC=15
    FINAL=16
    ABSTRACT=17
    SYNCHRONIZED=18
    NATIVE=19
    STRICTFP=20
    VOID=21
    BOOLEAN=22
    CHAR=23
    BYTE=24
    SHORT=25
    INT=26
    LONG=27
    FLOAT=28
    DOUBLE=29
    IF=30
    ELSE=31
    WHILE=32
    FOR=33
    RETURN=34
    TRUE=35
    FALSE=36
    NULL=37
    SWITCH=38
    CASE=39
    DEFAULT=40
    BREAK=41
    CONTINUE=42
    DO=43
    THROW=44
    THROWS=45
    ASSERT=46
    NEW=47
    INSTANCEOF=48
    THIS=49
    SUPER=50
    PLUS=51
    MINUS=52
    MULT=53
    DIV=54
    MOD=55
    EQUAL=56
    NOTEQUAL=57
    LT=58
    GT=59
    LE=60
    GE=61
    ASSIGN=62
    DOT=63
    AND=64
    OR=65
    INC=66
    DEC=67
    BITAND=68
    BITOR=69
    CARET=70
    TILDE=71
    BANG=72
    ADD_ASSIGN=73
    SUB_ASSIGN=74
    MUL_ASSIGN=75
    DIV_ASSIGN=76
    MOD_ASSIGN=77
    AND_ASSIGN=78
    OR_ASSIGN=79
    XOR_ASSIGN=80
    LSHIFT_ASSIGN=81
    RSHIFT_ASSIGN=82
    URSHIFT_ASSIGN=83
    LBRACE=84
    RBRACE=85
    LPAREN=86
    RPAREN=87
    LBRACK=88
    RBRACK=89
    COMMA=90
    SEMI=91
    QUESTION=92
    COLON=93
    ELLIPSIS=94
    AT=95
    IDENTIFIER=96
    DecimalIntegerLiteral=97
    FloatingPointLiteral=98
    StringLiteral=99
    CharacterLiteral=100
    WS=101
    COMMENT=102
    LINE_COMMENT=103

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SimpleJavaParser.EOF, 0)

        def packageDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.PackageDeclarationContext,0)


        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ImportDeclarationContext,i)


        def typeDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.TypeDeclarationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.TypeDeclarationContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)




    def compilationUnit(self):

        localctx = SimpleJavaParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 160
                self.packageDeclaration()


            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 163
                self.importDeclaration()
                self.state = 168
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 170 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 169
                self.typeDeclaration()
                self.state = 172 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 2095872) != 0) or _la==95):
                    break

            self.state = 174
            self.match(SimpleJavaParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(SimpleJavaParser.PACKAGE, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SimpleJavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_packageDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDeclaration" ):
                listener.enterPackageDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDeclaration" ):
                listener.exitPackageDeclaration(self)




    def packageDeclaration(self):

        localctx = SimpleJavaParser.PackageDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_packageDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.match(SimpleJavaParser.PACKAGE)
            self.state = 177
            self.qualifiedName()
            self.state = 178
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(SimpleJavaParser.IMPORT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SimpleJavaParser.QualifiedNameContext,0)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)

        def MULT(self):
            return self.getToken(SimpleJavaParser.MULT, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)




    def importDeclaration(self):

        localctx = SimpleJavaParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.match(SimpleJavaParser.IMPORT)
            self.state = 181
            self.qualifiedName()
            self.state = 184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 182
                self.match(SimpleJavaParser.DOT)
                self.state = 183
                self.match(SimpleJavaParser.MULT)


            self.state = 186
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.IDENTIFIER)
            else:
                return self.getToken(SimpleJavaParser.IDENTIFIER, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.DOT)
            else:
                return self.getToken(SimpleJavaParser.DOT, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_qualifiedName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedName" ):
                listener.enterQualifiedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedName" ):
                listener.exitQualifiedName(self)




    def qualifiedName(self):

        localctx = SimpleJavaParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 193
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 189
                    self.match(SimpleJavaParser.DOT)
                    self.state = 190
                    self.match(SimpleJavaParser.IDENTIFIER) 
                self.state = 195
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.EnumDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.InterfaceDeclarationContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeDeclaration" ):
                listener.enterTypeDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeDeclaration" ):
                listener.exitTypeDeclaration(self)




    def typeDeclaration(self):

        localctx = SimpleJavaParser.TypeDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_typeDeclaration)
        try:
            self.state = 199
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 196
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 197
                self.enumDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 198
                self.interfaceDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(SimpleJavaParser.CLASS, 0)

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ModifierContext,i)


        def typeParameters(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeParametersContext,0)


        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def implementsClause(self):
            return self.getTypedRuleContext(SimpleJavaParser.ImplementsClauseContext,0)


        def memberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.MemberDeclarationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.MemberDeclarationContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = SimpleJavaParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 201
                self.annotation()
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0):
                self.state = 207
                self.modifier()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self.match(SimpleJavaParser.CLASS)
            self.state = 214
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 215
                self.typeParameters()


            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 218
                self.match(SimpleJavaParser.T__0)
                self.state = 219
                self.type_()


            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 222
                self.implementsClause()


            self.state = 225
            self.match(SimpleJavaParser.LBRACE)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1073740032) != 0) or _la==95 or _la==96:
                self.state = 226
                self.memberDeclaration()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 232
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACE(self):
            return self.getToken(SimpleJavaParser.INTERFACE, 0)

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ModifierContext,i)


        def typeParameters(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeParametersContext,0)


        def typeList(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeListContext,0)


        def interfaceMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.InterfaceMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.InterfaceMemberDeclarationContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_interfaceDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclaration" ):
                listener.enterInterfaceDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclaration" ):
                listener.exitInterfaceDeclaration(self)




    def interfaceDeclaration(self):

        localctx = SimpleJavaParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0):
                self.state = 234
                self.modifier()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.match(SimpleJavaParser.INTERFACE)
            self.state = 241
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 242
                self.typeParameters()


            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 245
                self.match(SimpleJavaParser.T__0)
                self.state = 246
                self.typeList()


            self.state = 249
            self.match(SimpleJavaParser.LBRACE)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1073740544) != 0) or ((((_la - 91)) & ~0x3f) == 0 and ((1 << (_la - 91)) & 49) != 0):
                self.state = 250
                self.interfaceMemberDeclaration()
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 256
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(SimpleJavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_implementsClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplementsClause" ):
                listener.enterImplementsClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplementsClause" ):
                listener.exitImplementsClause(self)




    def implementsClause(self):

        localctx = SimpleJavaParser.ImplementsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_implementsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(SimpleJavaParser.IMPLEMENTS)
            self.state = 259
            self.typeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.FieldDeclarationContext,0)


        def interfaceMethodDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.InterfaceMethodDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassDeclarationContext,0)


        def interfaceDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.InterfaceDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.EnumDeclarationContext,0)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_interfaceMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMemberDeclaration" ):
                listener.enterInterfaceMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMemberDeclaration" ):
                listener.exitInterfaceMemberDeclaration(self)




    def interfaceMemberDeclaration(self):

        localctx = SimpleJavaParser.InterfaceMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_interfaceMemberDeclaration)
        try:
            self.state = 267
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 261
                self.fieldDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 262
                self.interfaceMethodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 263
                self.classDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 264
                self.interfaceDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 265
                self.enumDeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 266
                self.match(SimpleJavaParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceMethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnType(self):
            return self.getTypedRuleContext(SimpleJavaParser.ReturnTypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ModifierContext,i)


        def formalParameters(self):
            return self.getTypedRuleContext(SimpleJavaParser.FormalParametersContext,0)


        def THROWS(self):
            return self.getToken(SimpleJavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(SimpleJavaParser.QualifiedNameListContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_interfaceMethodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceMethodDeclaration" ):
                listener.enterInterfaceMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceMethodDeclaration" ):
                listener.exitInterfaceMethodDeclaration(self)




    def interfaceMethodDeclaration(self):

        localctx = SimpleJavaParser.InterfaceMethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_interfaceMethodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0):
                self.state = 269
                self.modifier()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 275
            self.returnType()
            self.state = 276
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 277
            self.match(SimpleJavaParser.LPAREN)
            self.state = 279
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1069547520) != 0) or _la==95 or _la==96:
                self.state = 278
                self.formalParameters()


            self.state = 281
            self.match(SimpleJavaParser.RPAREN)
            self.state = 284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 282
                self.match(SimpleJavaParser.THROWS)
                self.state = 283
                self.qualifiedNameList()


            self.state = 286
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(SimpleJavaParser.ENUM, 0)

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ModifierContext,i)


        def IMPLEMENTS(self):
            return self.getToken(SimpleJavaParser.IMPLEMENTS, 0)

        def typeList(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeListContext,0)


        def enumConstantList(self):
            return self.getTypedRuleContext(SimpleJavaParser.EnumConstantListContext,0)


        def enumBodyDeclarations(self):
            return self.getTypedRuleContext(SimpleJavaParser.EnumBodyDeclarationsContext,0)


        def COMMA(self):
            return self.getToken(SimpleJavaParser.COMMA, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_enumDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDeclaration" ):
                listener.enterEnumDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDeclaration" ):
                listener.exitEnumDeclaration(self)




    def enumDeclaration(self):

        localctx = SimpleJavaParser.EnumDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_enumDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0):
                self.state = 288
                self.modifier()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 294
            self.match(SimpleJavaParser.ENUM)
            self.state = 295
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 296
                self.match(SimpleJavaParser.IMPLEMENTS)
                self.state = 297
                self.typeList()


            self.state = 300
            self.match(SimpleJavaParser.LBRACE)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 301
                self.enumConstantList()
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==90:
                    self.state = 302
                    self.match(SimpleJavaParser.COMMA)




            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==91:
                self.state = 307
                self.enumBodyDeclarations()


            self.state = 310
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumConstant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.EnumConstantContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.EnumConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_enumConstantList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantList" ):
                listener.enterEnumConstantList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantList" ):
                listener.exitEnumConstantList(self)




    def enumConstantList(self):

        localctx = SimpleJavaParser.EnumConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_enumConstantList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.enumConstant()
            self.state = 317
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 313
                    self.match(SimpleJavaParser.COMMA)
                    self.state = 314
                    self.enumConstant() 
                self.state = 319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def arguments(self):
            return self.getTypedRuleContext(SimpleJavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_enumConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstant" ):
                listener.enterEnumConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstant" ):
                listener.exitEnumConstant(self)




    def enumConstant(self):

        localctx = SimpleJavaParser.EnumConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_enumConstant)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 321
                self.arguments()


            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 324
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumBodyDeclarationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def memberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.MemberDeclarationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.MemberDeclarationContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_enumBodyDeclarations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumBodyDeclarations" ):
                listener.enterEnumBodyDeclarations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumBodyDeclarations" ):
                listener.exitEnumBodyDeclarations(self)




    def enumBodyDeclarations(self):

        localctx = SimpleJavaParser.EnumBodyDeclarationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_enumBodyDeclarations)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(SimpleJavaParser.SEMI)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1073740032) != 0) or _la==95 or _la==96:
                self.state = 328
                self.memberDeclaration()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SimpleJavaParser.LT, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.TypeParameterContext,i)


        def GT(self):
            return self.getToken(SimpleJavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)




    def typeParameters(self):

        localctx = SimpleJavaParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(SimpleJavaParser.LT)
            self.state = 335
            self.typeParameter()
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 336
                self.match(SimpleJavaParser.COMMA)
                self.state = 337
                self.typeParameter()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 343
            self.match(SimpleJavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def typeBound(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeBoundContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)




    def typeParameter(self):

        localctx = SimpleJavaParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 346
                self.match(SimpleJavaParser.T__0)
                self.state = 347
                self.typeBound()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.TypeContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.TypeContext,i)


        def BITAND(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.BITAND)
            else:
                return self.getToken(SimpleJavaParser.BITAND, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeBound

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeBound" ):
                listener.enterTypeBound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeBound" ):
                listener.exitTypeBound(self)




    def typeBound(self):

        localctx = SimpleJavaParser.TypeBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeBound)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.type_()
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==68:
                self.state = 351
                self.match(SimpleJavaParser.BITAND)
                self.state = 352
                self.type_()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.FieldDeclarationContext,0)


        def methodDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.MethodDeclarationContext,0)


        def constructorDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.ConstructorDeclarationContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassDeclarationContext,0)


        def enumDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.EnumDeclarationContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_memberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDeclaration" ):
                listener.enterMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDeclaration" ):
                listener.exitMemberDeclaration(self)




    def memberDeclaration(self):

        localctx = SimpleJavaParser.MemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_memberDeclaration)
        try:
            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.fieldDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 359
                self.methodDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 360
                self.constructorDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 361
                self.classDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 362
                self.enumDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.VariableDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ModifierContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_fieldDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclaration" ):
                listener.enterFieldDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclaration" ):
                listener.exitFieldDeclaration(self)




    def fieldDeclaration(self):

        localctx = SimpleJavaParser.FieldDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fieldDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 365
                self.annotation()
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0):
                self.state = 371
                self.modifier()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 377
            self.type_()
            self.state = 378
            self.variableDeclarator()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 379
                self.match(SimpleJavaParser.COMMA)
                self.state = 380
                self.variableDeclarator()
                self.state = 385
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 386
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(SimpleJavaParser.ASSIGN, 0)

        def variableInitializer(self):
            return self.getTypedRuleContext(SimpleJavaParser.VariableInitializerContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_variableDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarator" ):
                listener.enterVariableDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarator" ):
                listener.exitVariableDeclarator(self)




    def variableDeclarator(self):

        localctx = SimpleJavaParser.VariableDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_variableDeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 389
                self.match(SimpleJavaParser.ASSIGN)
                self.state = 390
                self.variableInitializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def arrayInitializer(self):
            return self.getTypedRuleContext(SimpleJavaParser.ArrayInitializerContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_variableInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableInitializer" ):
                listener.enterVariableInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableInitializer" ):
                listener.exitVariableInitializer(self)




    def variableInitializer(self):

        localctx = SimpleJavaParser.VariableInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_variableInitializer)
        try:
            self.state = 395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 47, 49, 50, 51, 52, 58, 66, 67, 71, 72, 86, 95, 96, 97, 98, 99, 100]:
                self.enterOuterAlt(localctx, 1)
                self.state = 393
                self.expression(0)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 2)
                self.state = 394
                self.arrayInitializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ModifierContext,i)


        def formalParameters(self):
            return self.getTypedRuleContext(SimpleJavaParser.FormalParametersContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_constructorDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDeclaration" ):
                listener.enterConstructorDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDeclaration" ):
                listener.exitConstructorDeclaration(self)




    def constructorDeclaration(self):

        localctx = SimpleJavaParser.ConstructorDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constructorDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0):
                self.state = 397
                self.modifier()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 404
            self.match(SimpleJavaParser.LPAREN)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1069547520) != 0) or _la==95 or _la==96:
                self.state = 405
                self.formalParameters()


            self.state = 408
            self.match(SimpleJavaParser.RPAREN)
            self.state = 409
            self.match(SimpleJavaParser.LBRACE)
            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 296919264642726660) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33857732707) != 0):
                self.state = 410
                self.blockStatement()
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 416
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def returnType(self):
            return self.getTypedRuleContext(SimpleJavaParser.ReturnTypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.AnnotationContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ModifierContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ModifierContext,i)


        def formalParameters(self):
            return self.getTypedRuleContext(SimpleJavaParser.FormalParametersContext,0)


        def THROWS(self):
            return self.getToken(SimpleJavaParser.THROWS, 0)

        def qualifiedNameList(self):
            return self.getTypedRuleContext(SimpleJavaParser.QualifiedNameListContext,0)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_methodDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclaration" ):
                listener.enterMethodDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclaration" ):
                listener.exitMethodDeclaration(self)




    def methodDeclaration(self):

        localctx = SimpleJavaParser.MethodDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 418
                self.annotation()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0):
                self.state = 424
                self.modifier()
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 430
            self.returnType()
            self.state = 431
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 432
            self.match(SimpleJavaParser.LPAREN)
            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1069547520) != 0) or _la==95 or _la==96:
                self.state = 433
                self.formalParameters()


            self.state = 436
            self.match(SimpleJavaParser.RPAREN)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 437
                self.match(SimpleJavaParser.THROWS)
                self.state = 438
                self.qualifiedNameList()


            self.state = 441
            self.match(SimpleJavaParser.LBRACE)
            self.state = 445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 296919264642726660) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33857732707) != 0):
                self.state = 442
                self.blockStatement()
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 448
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(SimpleJavaParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(SimpleJavaParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(SimpleJavaParser.PROTECTED, 0)

        def STATIC(self):
            return self.getToken(SimpleJavaParser.STATIC, 0)

        def FINAL(self):
            return self.getToken(SimpleJavaParser.FINAL, 0)

        def ABSTRACT(self):
            return self.getToken(SimpleJavaParser.ABSTRACT, 0)

        def SYNCHRONIZED(self):
            return self.getToken(SimpleJavaParser.SYNCHRONIZED, 0)

        def NATIVE(self):
            return self.getToken(SimpleJavaParser.NATIVE, 0)

        def STRICTFP(self):
            return self.getToken(SimpleJavaParser.STRICTFP, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = SimpleJavaParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2091008) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def VOID(self):
            return self.getToken(SimpleJavaParser.VOID, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_returnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnType" ):
                listener.enterReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnType" ):
                listener.exitReturnType(self)




    def returnType(self):

        localctx = SimpleJavaParser.ReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_returnType)
        try:
            self.state = 454
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 23, 24, 25, 26, 27, 28, 29, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.type_()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 453
                self.match(SimpleJavaParser.VOID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(SimpleJavaParser.PrimitiveTypeContext,0)


        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.LBRACK)
            else:
                return self.getToken(SimpleJavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.RBRACK)
            else:
                return self.getToken(SimpleJavaParser.RBRACK, i)

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)




    def type_(self):

        localctx = SimpleJavaParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_type)
        try:
            self.state = 472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 23, 24, 25, 26, 27, 28, 29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 456
                self.primitiveType()
                self.state = 461
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 457
                        self.match(SimpleJavaParser.LBRACK)
                        self.state = 458
                        self.match(SimpleJavaParser.RBRACK) 
                    self.state = 463
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 464
                self.classOrInterfaceType()
                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 465
                        self.match(SimpleJavaParser.LBRACK)
                        self.state = 466
                        self.match(SimpleJavaParser.RBRACK) 
                    self.state = 471
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassOrInterfaceTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.IDENTIFIER)
            else:
                return self.getToken(SimpleJavaParser.IDENTIFIER, i)

        def typeArguments(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.TypeArgumentsContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.TypeArgumentsContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.DOT)
            else:
                return self.getToken(SimpleJavaParser.DOT, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_classOrInterfaceType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassOrInterfaceType" ):
                listener.enterClassOrInterfaceType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassOrInterfaceType" ):
                listener.exitClassOrInterfaceType(self)




    def classOrInterfaceType(self):

        localctx = SimpleJavaParser.ClassOrInterfaceTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classOrInterfaceType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 475
                self.typeArguments()


            self.state = 485
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 478
                    self.match(SimpleJavaParser.DOT)
                    self.state = 479
                    self.match(SimpleJavaParser.IDENTIFIER)
                    self.state = 481
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                    if la_ == 1:
                        self.state = 480
                        self.typeArguments()

             
                self.state = 487
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimitiveTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(SimpleJavaParser.BOOLEAN, 0)

        def CHAR(self):
            return self.getToken(SimpleJavaParser.CHAR, 0)

        def BYTE(self):
            return self.getToken(SimpleJavaParser.BYTE, 0)

        def SHORT(self):
            return self.getToken(SimpleJavaParser.SHORT, 0)

        def INT(self):
            return self.getToken(SimpleJavaParser.INT, 0)

        def LONG(self):
            return self.getToken(SimpleJavaParser.LONG, 0)

        def FLOAT(self):
            return self.getToken(SimpleJavaParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(SimpleJavaParser.DOUBLE, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_primitiveType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitiveType" ):
                listener.enterPrimitiveType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitiveType" ):
                listener.exitPrimitiveType(self)




    def primitiveType(self):

        localctx = SimpleJavaParser.PrimitiveTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_primitiveType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 488
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1069547520) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SimpleJavaParser.LT, 0)

        def typeArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.TypeArgumentContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.TypeArgumentContext,i)


        def GT(self):
            return self.getToken(SimpleJavaParser.GT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)




    def typeArguments(self):

        localctx = SimpleJavaParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(SimpleJavaParser.LT)
            self.state = 491
            self.typeArgument()
            self.state = 496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 492
                self.match(SimpleJavaParser.COMMA)
                self.state = 493
                self.typeArgument()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 499
            self.match(SimpleJavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def QUESTION(self):
            return self.getToken(SimpleJavaParser.QUESTION, 0)

        def SUPER(self):
            return self.getToken(SimpleJavaParser.SUPER, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgument" ):
                listener.enterTypeArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgument" ):
                listener.exitTypeArgument(self)




    def typeArgument(self):

        localctx = SimpleJavaParser.TypeArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_typeArgument)
        self._la = 0 # Token type
        try:
            self.state = 507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 23, 24, 25, 26, 27, 28, 29, 96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.type_()
                pass
            elif token in [92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.match(SimpleJavaParser.QUESTION)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1 or _la==50:
                    self.state = 503
                    _la = self._input.LA(1)
                    if not(_la==1 or _la==50):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 504
                    self.type_()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.TypeContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeList" ):
                listener.enterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeList" ):
                listener.exitTypeList(self)




    def typeList(self):

        localctx = SimpleJavaParser.TypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_typeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.type_()
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 510
                self.match(SimpleJavaParser.COMMA)
                self.state = 511
                self.type_()
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(SimpleJavaParser.AT, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(SimpleJavaParser.QualifiedNameContext,0)


        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def elementValuePairList(self):
            return self.getTypedRuleContext(SimpleJavaParser.ElementValuePairListContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)




    def annotation(self):

        localctx = SimpleJavaParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(SimpleJavaParser.AT)
            self.state = 518
            self.qualifiedName()
            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 519
                self.match(SimpleJavaParser.LPAREN)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33824178275) != 0):
                    self.state = 520
                    self.elementValuePairList()


                self.state = 523
                self.match(SimpleJavaParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elementValuePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ElementValuePairContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ElementValuePairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_elementValuePairList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePairList" ):
                listener.enterElementValuePairList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePairList" ):
                listener.exitElementValuePairList(self)




    def elementValuePairList(self):

        localctx = SimpleJavaParser.ElementValuePairListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_elementValuePairList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.elementValuePair()
            self.state = 531
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 527
                self.match(SimpleJavaParser.COMMA)
                self.state = 528
                self.elementValuePair()
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValuePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def ASSIGN(self):
            return self.getToken(SimpleJavaParser.ASSIGN, 0)

        def elementValue(self):
            return self.getTypedRuleContext(SimpleJavaParser.ElementValueContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_elementValuePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValuePair" ):
                listener.enterElementValuePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValuePair" ):
                listener.exitElementValuePair(self)




    def elementValuePair(self):

        localctx = SimpleJavaParser.ElementValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_elementValuePair)
        try:
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.match(SimpleJavaParser.IDENTIFIER)
                self.state = 535
                self.match(SimpleJavaParser.ASSIGN)
                self.state = 536
                self.elementValue()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.elementValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def annotation(self):
            return self.getTypedRuleContext(SimpleJavaParser.AnnotationContext,0)


        def elementValueArrayInitializer(self):
            return self.getTypedRuleContext(SimpleJavaParser.ElementValueArrayInitializerContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_elementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValue" ):
                listener.enterElementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValue" ):
                listener.exitElementValue(self)




    def elementValue(self):

        localctx = SimpleJavaParser.ElementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_elementValue)
        try:
            self.state = 543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.annotation()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 542
                self.elementValueArrayInitializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementValueArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def elementValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ElementValueContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ElementValueContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_elementValueArrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementValueArrayInitializer" ):
                listener.enterElementValueArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementValueArrayInitializer" ):
                listener.exitElementValueArrayInitializer(self)




    def elementValueArrayInitializer(self):

        localctx = SimpleJavaParser.ElementValueArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_elementValueArrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(SimpleJavaParser.LBRACE)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33824178275) != 0):
                self.state = 546
                self.elementValue()
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 547
                        self.match(SimpleJavaParser.COMMA)
                        self.state = 548
                        self.elementValue() 
                    self.state = 553
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)



            self.state = 557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 556
                self.match(SimpleJavaParser.COMMA)


            self.state = 559
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.FormalParameterContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.FormalParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_formalParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameters" ):
                listener.enterFormalParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameters" ):
                listener.exitFormalParameters(self)




    def formalParameters(self):

        localctx = SimpleJavaParser.FormalParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_formalParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.formalParameter()
            self.state = 566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 562
                self.match(SimpleJavaParser.COMMA)
                self.state = 563
                self.formalParameter()
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(SimpleJavaParser.VariableDeclaratorIdContext,0)


        def annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.AnnotationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.AnnotationContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_formalParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameter" ):
                listener.enterFormalParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameter" ):
                listener.exitFormalParameter(self)




    def formalParameter(self):

        localctx = SimpleJavaParser.FormalParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_formalParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==95:
                self.state = 569
                self.annotation()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 575
            self.type_()
            self.state = 576
            self.variableDeclaratorId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclaratorIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.LBRACK)
            else:
                return self.getToken(SimpleJavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.RBRACK)
            else:
                return self.getToken(SimpleJavaParser.RBRACK, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_variableDeclaratorId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaratorId" ):
                listener.enterVariableDeclaratorId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaratorId" ):
                listener.exitVariableDeclaratorId(self)




    def variableDeclaratorId(self):

        localctx = SimpleJavaParser.VariableDeclaratorIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_variableDeclaratorId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==88:
                self.state = 579
                self.match(SimpleJavaParser.LBRACK)
                self.state = 580
                self.match(SimpleJavaParser.RBRACK)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.QualifiedNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_qualifiedNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedNameList" ):
                listener.enterQualifiedNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedNameList" ):
                listener.exitQualifiedNameList(self)




    def qualifiedNameList(self):

        localctx = SimpleJavaParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.qualifiedName()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 587
                self.match(SimpleJavaParser.COMMA)
                self.state = 588
                self.qualifiedName()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = SimpleJavaParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.match(SimpleJavaParser.LBRACE)
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 296919264642726660) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33857732707) != 0):
                self.state = 595
                self.blockStatement()
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 601
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.LocalVariableDeclarationStatementContext,0)


        def statement(self):
            return self.getTypedRuleContext(SimpleJavaParser.StatementContext,0)


        def typeDeclaration(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeDeclarationContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = SimpleJavaParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_blockStatement)
        try:
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 603
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.typeDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(SimpleJavaParser.BlockContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.IfStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.WhileStatementContext,0)


        def forStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.ForStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.TryStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.ReturnStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.SwitchStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.BreakStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.ContinueStatementContext,0)


        def doWhileStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.DoWhileStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.ThrowStatementContext,0)


        def synchronizedStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.SynchronizedStatementContext,0)


        def ASSERT(self):
            return self.getToken(SimpleJavaParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def COLON(self):
            return self.getToken(SimpleJavaParser.COLON, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = SimpleJavaParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.block()
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 609
                self.ifStatement()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.whileStatement()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 4)
                self.state = 611
                self.forStatement()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 5)
                self.state = 612
                self.tryStatement()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 6)
                self.state = 613
                self.returnStatement()
                pass
            elif token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 47, 49, 50, 51, 52, 58, 66, 67, 71, 72, 86, 95, 96, 97, 98, 99, 100]:
                self.enterOuterAlt(localctx, 7)
                self.state = 614
                self.expressionStatement()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 615
                self.switchStatement()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 9)
                self.state = 616
                self.breakStatement()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 10)
                self.state = 617
                self.continueStatement()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 11)
                self.state = 618
                self.doWhileStatement()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 12)
                self.state = 619
                self.throwStatement()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 13)
                self.state = 620
                self.synchronizedStatement()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 14)
                self.state = 621
                self.match(SimpleJavaParser.ASSERT)
                self.state = 622
                self.expression(0)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==93:
                    self.state = 623
                    self.match(SimpleJavaParser.COLON)
                    self.state = 624
                    self.expression(0)


                self.state = 627
                self.match(SimpleJavaParser.SEMI)
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 15)
                self.state = 629
                self.match(SimpleJavaParser.SEMI)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SWITCH(self):
            return self.getToken(SimpleJavaParser.SWITCH, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def switchBlockStatementGroup(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.SwitchBlockStatementGroupContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.SwitchBlockStatementGroupContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = SimpleJavaParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_switchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(SimpleJavaParser.SWITCH)
            self.state = 633
            self.match(SimpleJavaParser.LPAREN)
            self.state = 634
            self.expression(0)
            self.state = 635
            self.match(SimpleJavaParser.RPAREN)
            self.state = 636
            self.match(SimpleJavaParser.LBRACE)
            self.state = 640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39 or _la==40:
                self.state = 637
                self.switchBlockStatementGroup()
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 643
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchBlockStatementGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def switchLabel(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.SwitchLabelContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.SwitchLabelContext,i)


        def blockStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.BlockStatementContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.BlockStatementContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_switchBlockStatementGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchBlockStatementGroup" ):
                listener.enterSwitchBlockStatementGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchBlockStatementGroup" ):
                listener.exitSwitchBlockStatementGroup(self)




    def switchBlockStatementGroup(self):

        localctx = SimpleJavaParser.SwitchBlockStatementGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_switchBlockStatementGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 645
                    self.switchLabel()

                else:
                    raise NoViableAltException(self)
                self.state = 648 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

            self.state = 653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 296919264642726660) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33857732707) != 0):
                self.state = 650
                self.blockStatement()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchLabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(SimpleJavaParser.COLON, 0)

        def CASE(self):
            return self.getToken(SimpleJavaParser.CASE, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ConstantExpressionContext,0)


        def enumConstantName(self):
            return self.getTypedRuleContext(SimpleJavaParser.EnumConstantNameContext,0)


        def DEFAULT(self):
            return self.getToken(SimpleJavaParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_switchLabel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchLabel" ):
                listener.enterSwitchLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchLabel" ):
                listener.exitSwitchLabel(self)




    def switchLabel(self):

        localctx = SimpleJavaParser.SwitchLabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_switchLabel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 656
                self.match(SimpleJavaParser.CASE)
                self.state = 657
                self.constantExpression()
                pass

            elif la_ == 2:
                self.state = 658
                self.match(SimpleJavaParser.CASE)
                self.state = 659
                self.enumConstantName()
                pass

            elif la_ == 3:
                self.state = 660
                self.match(SimpleJavaParser.DEFAULT)
                pass


            self.state = 663
            self.match(SimpleJavaParser.COLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)




    def constantExpression(self):

        localctx = SimpleJavaParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumConstantNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_enumConstantName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumConstantName" ):
                listener.enterEnumConstantName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumConstantName" ):
                listener.exitEnumConstantName(self)




    def enumConstantName(self):

        localctx = SimpleJavaParser.EnumConstantNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enumConstantName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(SimpleJavaParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(SimpleJavaParser.BREAK, 0)

        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = SimpleJavaParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_breakStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(SimpleJavaParser.BREAK)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 670
                self.match(SimpleJavaParser.IDENTIFIER)


            self.state = 673
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(SimpleJavaParser.CONTINUE, 0)

        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = SimpleJavaParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_continueStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(SimpleJavaParser.CONTINUE)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==96:
                self.state = 676
                self.match(SimpleJavaParser.IDENTIFIER)


            self.state = 679
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(SimpleJavaParser.DO, 0)

        def statement(self):
            return self.getTypedRuleContext(SimpleJavaParser.StatementContext,0)


        def WHILE(self):
            return self.getToken(SimpleJavaParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_doWhileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileStatement" ):
                listener.enterDoWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileStatement" ):
                listener.exitDoWhileStatement(self)




    def doWhileStatement(self):

        localctx = SimpleJavaParser.DoWhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_doWhileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(SimpleJavaParser.DO)
            self.state = 682
            self.statement()
            self.state = 683
            self.match(SimpleJavaParser.WHILE)
            self.state = 684
            self.match(SimpleJavaParser.LPAREN)
            self.state = 685
            self.expression(0)
            self.state = 686
            self.match(SimpleJavaParser.RPAREN)
            self.state = 687
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(SimpleJavaParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = SimpleJavaParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 689
            self.match(SimpleJavaParser.THROW)
            self.state = 690
            self.expression(0)
            self.state = 691
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SynchronizedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(SimpleJavaParser.SYNCHRONIZED, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(SimpleJavaParser.BlockContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_synchronizedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSynchronizedStatement" ):
                listener.enterSynchronizedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSynchronizedStatement" ):
                listener.exitSynchronizedStatement(self)




    def synchronizedStatement(self):

        localctx = SimpleJavaParser.SynchronizedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_synchronizedStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(SimpleJavaParser.SYNCHRONIZED)
            self.state = 694
            self.match(SimpleJavaParser.LPAREN)
            self.state = 695
            self.expression(0)
            self.state = 696
            self.match(SimpleJavaParser.RPAREN)
            self.state = 697
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def variableDeclarator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.VariableDeclaratorContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.VariableDeclaratorContext,i)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_localVariableDeclarationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclarationStatement" ):
                listener.enterLocalVariableDeclarationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclarationStatement" ):
                listener.exitLocalVariableDeclarationStatement(self)




    def localVariableDeclarationStatement(self):

        localctx = SimpleJavaParser.LocalVariableDeclarationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_localVariableDeclarationStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 699
            self.type_()
            self.state = 700
            self.variableDeclarator()
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 701
                self.match(SimpleJavaParser.COMMA)
                self.state = 702
                self.variableDeclarator()
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 708
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SimpleJavaParser.IF, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.StatementContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.StatementContext,i)


        def ELSE(self):
            return self.getToken(SimpleJavaParser.ELSE, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = SimpleJavaParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(SimpleJavaParser.IF)
            self.state = 711
            self.match(SimpleJavaParser.LPAREN)
            self.state = 712
            self.expression(0)
            self.state = 713
            self.match(SimpleJavaParser.RPAREN)
            self.state = 714
            self.statement()
            self.state = 717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 715
                self.match(SimpleJavaParser.ELSE)
                self.state = 716
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(SimpleJavaParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(SimpleJavaParser.StatementContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = SimpleJavaParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whileStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(SimpleJavaParser.WHILE)
            self.state = 720
            self.match(SimpleJavaParser.LPAREN)
            self.state = 721
            self.expression(0)
            self.state = 722
            self.match(SimpleJavaParser.RPAREN)
            self.state = 723
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(SimpleJavaParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def forControl(self):
            return self.getTypedRuleContext(SimpleJavaParser.ForControlContext,0)


        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def statement(self):
            return self.getTypedRuleContext(SimpleJavaParser.StatementContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)




    def forStatement(self):

        localctx = SimpleJavaParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(SimpleJavaParser.FOR)
            self.state = 726
            self.match(SimpleJavaParser.LPAREN)
            self.state = 727
            self.forControl()
            self.state = 728
            self.match(SimpleJavaParser.RPAREN)
            self.state = 729
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enhancedForControl(self):
            return self.getTypedRuleContext(SimpleJavaParser.EnhancedForControlContext,0)


        def basicForControl(self):
            return self.getTypedRuleContext(SimpleJavaParser.BasicForControlContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_forControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForControl" ):
                listener.enterForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForControl" ):
                listener.exitForControl(self)




    def forControl(self):

        localctx = SimpleJavaParser.ForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forControl)
        try:
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self.enhancedForControl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.basicForControl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnhancedForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def variableDeclaratorId(self):
            return self.getTypedRuleContext(SimpleJavaParser.VariableDeclaratorIdContext,0)


        def COLON(self):
            return self.getToken(SimpleJavaParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_enhancedForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnhancedForControl" ):
                listener.enterEnhancedForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnhancedForControl" ):
                listener.exitEnhancedForControl(self)




    def enhancedForControl(self):

        localctx = SimpleJavaParser.EnhancedForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_enhancedForControl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.type_()
            self.state = 736
            self.variableDeclaratorId()
            self.state = 737
            self.match(SimpleJavaParser.COLON)
            self.state = 738
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasicForControlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.SEMI)
            else:
                return self.getToken(SimpleJavaParser.SEMI, i)

        def forInit(self):
            return self.getTypedRuleContext(SimpleJavaParser.ForInitContext,0)


        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def forUpdate(self):
            return self.getTypedRuleContext(SimpleJavaParser.ForUpdateContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_basicForControl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasicForControl" ):
                listener.enterBasicForControl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasicForControl" ):
                listener.exitBasicForControl(self)




    def basicForControl(self):

        localctx = SimpleJavaParser.BasicForControlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_basicForControl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                self.state = 740
                self.forInit()


            self.state = 743
            self.match(SimpleJavaParser.SEMI)
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                self.state = 744
                self.expression(0)


            self.state = 747
            self.match(SimpleJavaParser.SEMI)
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                self.state = 748
                self.forUpdate()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForInitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDeclarationStatement(self):
            return self.getTypedRuleContext(SimpleJavaParser.LocalVariableDeclarationStatementContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionListContext,0)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_forInit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInit" ):
                listener.enterForInit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInit" ):
                listener.exitForInit(self)




    def forInit(self):

        localctx = SimpleJavaParser.ForInitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_forInit)
        try:
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.localVariableDeclarationStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.expressionList()
                self.state = 753
                self.match(SimpleJavaParser.SEMI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionList(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_forUpdate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForUpdate" ):
                listener.enterForUpdate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForUpdate" ):
                listener.exitForUpdate(self)




    def forUpdate(self):

        localctx = SimpleJavaParser.ForUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_forUpdate)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.expressionList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.BlockContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.BlockContext,i)


        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.CatchClauseContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = SimpleJavaParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_tryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(SimpleJavaParser.T__1)
            self.state = 760
            self.block()
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==4:
                self.state = 761
                self.catchClause()
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 767
                self.match(SimpleJavaParser.T__2)
                self.state = 768
                self.block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(SimpleJavaParser.BlockContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)




    def catchClause(self):

        localctx = SimpleJavaParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.match(SimpleJavaParser.T__3)
            self.state = 772
            self.match(SimpleJavaParser.LPAREN)
            self.state = 773
            self.type_()
            self.state = 774
            self.match(SimpleJavaParser.IDENTIFIER)
            self.state = 775
            self.match(SimpleJavaParser.RPAREN)
            self.state = 776
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(SimpleJavaParser.RETURN, 0)

        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = SimpleJavaParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(SimpleJavaParser.RETURN)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                self.state = 779
                self.expression(0)


            self.state = 782
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def SEMI(self):
            return self.getToken(SimpleJavaParser.SEMI, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = SimpleJavaParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.expression(0)
            self.state = 785
            self.match(SimpleJavaParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class BitwiseOrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def BITOR(self):
            return self.getToken(SimpleJavaParser.BITOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseOrExpr" ):
                listener.enterBitwiseOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseOrExpr" ):
                listener.exitBitwiseOrExpr(self)


    class RelationalExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def LT(self):
            return self.getToken(SimpleJavaParser.LT, 0)
        def GT(self):
            return self.getToken(SimpleJavaParser.GT, 0)
        def LE(self):
            return self.getToken(SimpleJavaParser.LE, 0)
        def GE(self):
            return self.getToken(SimpleJavaParser.GE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpr" ):
                listener.enterRelationalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpr" ):
                listener.exitRelationalExpr(self)


    class DotMethodCallExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)
        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)
        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotMethodCallExpr" ):
                listener.enterDotMethodCallExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotMethodCallExpr" ):
                listener.exitDotMethodCallExpr(self)


    class LogicalAndExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(SimpleJavaParser.AND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpr" ):
                listener.enterLogicalAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpr" ):
                listener.exitLogicalAndExpr(self)


    class PostIncrementExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.postfix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def INC(self):
            return self.getToken(SimpleJavaParser.INC, 0)
        def DEC(self):
            return self.getToken(SimpleJavaParser.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpr" ):
                listener.enterPostIncrementExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpr" ):
                listener.exitPostIncrementExpr(self)


    class PreIncrementExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def INC(self):
            return self.getToken(SimpleJavaParser.INC, 0)
        def DEC(self):
            return self.getToken(SimpleJavaParser.DEC, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpr" ):
                listener.enterPreIncrementExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpr" ):
                listener.exitPreIncrementExpr(self)


    class MultiplicativeExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def MULT(self):
            return self.getToken(SimpleJavaParser.MULT, 0)
        def DIV(self):
            return self.getToken(SimpleJavaParser.DIV, 0)
        def MOD(self):
            return self.getToken(SimpleJavaParser.MOD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpr" ):
                listener.enterMultiplicativeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpr" ):
                listener.exitMultiplicativeExpr(self)


    class DotSuperExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)
        def SUPER(self):
            return self.getToken(SimpleJavaParser.SUPER, 0)
        def superSuffix(self):
            return self.getTypedRuleContext(SimpleJavaParser.SuperSuffixContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotSuperExpr" ):
                listener.enterDotSuperExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotSuperExpr" ):
                listener.exitDotSuperExpr(self)


    class EqualityExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def EQUAL(self):
            return self.getToken(SimpleJavaParser.EQUAL, 0)
        def NOTEQUAL(self):
            return self.getToken(SimpleJavaParser.NOTEQUAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpr" ):
                listener.enterEqualityExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpr" ):
                listener.exitEqualityExpr(self)


    class CastExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)
        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)

        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpr" ):
                listener.enterCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpr" ):
                listener.exitCastExpr(self)


    class PrimaryExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary(self):
            return self.getTypedRuleContext(SimpleJavaParser.PrimaryContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpr" ):
                listener.enterPrimaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpr" ):
                listener.exitPrimaryExpr(self)


    class FieldAccessExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)
        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldAccessExpr" ):
                listener.enterFieldAccessExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldAccessExpr" ):
                listener.exitFieldAccessExpr(self)


    class DotThisExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)
        def THIS(self):
            return self.getToken(SimpleJavaParser.THIS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotThisExpr" ):
                listener.enterDotThisExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotThisExpr" ):
                listener.exitDotThisExpr(self)


    class TernaryExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def QUESTION(self):
            return self.getToken(SimpleJavaParser.QUESTION, 0)
        def COLON(self):
            return self.getToken(SimpleJavaParser.COLON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpr" ):
                listener.enterTernaryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpr" ):
                listener.exitTernaryExpr(self)


    class BitwiseAndExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def BITAND(self):
            return self.getToken(SimpleJavaParser.BITAND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseAndExpr" ):
                listener.enterBitwiseAndExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseAndExpr" ):
                listener.exitBitwiseAndExpr(self)


    class ArrayAccessExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def LBRACK(self):
            return self.getToken(SimpleJavaParser.LBRACK, 0)
        def RBRACK(self):
            return self.getToken(SimpleJavaParser.RBRACK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccessExpr" ):
                listener.enterArrayAccessExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccessExpr" ):
                listener.exitArrayAccessExpr(self)


    class InstanceofExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def INSTANCEOF(self):
            return self.getToken(SimpleJavaParser.INSTANCEOF, 0)
        def type_(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceofExpr" ):
                listener.enterInstanceofExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceofExpr" ):
                listener.exitInstanceofExpr(self)


    class LambdaExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def lambdaExpression(self):
            return self.getTypedRuleContext(SimpleJavaParser.LambdaExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpr" ):
                listener.enterLambdaExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpr" ):
                listener.exitLambdaExpr(self)


    class AssignmentExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def ASSIGN(self):
            return self.getToken(SimpleJavaParser.ASSIGN, 0)
        def ADD_ASSIGN(self):
            return self.getToken(SimpleJavaParser.ADD_ASSIGN, 0)
        def SUB_ASSIGN(self):
            return self.getToken(SimpleJavaParser.SUB_ASSIGN, 0)
        def MUL_ASSIGN(self):
            return self.getToken(SimpleJavaParser.MUL_ASSIGN, 0)
        def DIV_ASSIGN(self):
            return self.getToken(SimpleJavaParser.DIV_ASSIGN, 0)
        def MOD_ASSIGN(self):
            return self.getToken(SimpleJavaParser.MOD_ASSIGN, 0)
        def AND_ASSIGN(self):
            return self.getToken(SimpleJavaParser.AND_ASSIGN, 0)
        def OR_ASSIGN(self):
            return self.getToken(SimpleJavaParser.OR_ASSIGN, 0)
        def XOR_ASSIGN(self):
            return self.getToken(SimpleJavaParser.XOR_ASSIGN, 0)
        def LSHIFT_ASSIGN(self):
            return self.getToken(SimpleJavaParser.LSHIFT_ASSIGN, 0)
        def RSHIFT_ASSIGN(self):
            return self.getToken(SimpleJavaParser.RSHIFT_ASSIGN, 0)
        def URSHIFT_ASSIGN(self):
            return self.getToken(SimpleJavaParser.URSHIFT_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpr" ):
                listener.enterAssignmentExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpr" ):
                listener.exitAssignmentExpr(self)


    class PrefixExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.prefix = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def MINUS(self):
            return self.getToken(SimpleJavaParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(SimpleJavaParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(SimpleJavaParser.TILDE, 0)
        def BANG(self):
            return self.getToken(SimpleJavaParser.BANG, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixExpr" ):
                listener.enterPrefixExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixExpr" ):
                listener.exitPrefixExpr(self)


    class LogicalOrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def OR(self):
            return self.getToken(SimpleJavaParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpr" ):
                listener.enterLogicalOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpr" ):
                listener.exitLogicalOrExpr(self)


    class AdditiveExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def PLUS(self):
            return self.getToken(SimpleJavaParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(SimpleJavaParser.MINUS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpr" ):
                listener.enterAdditiveExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpr" ):
                listener.exitAdditiveExpr(self)


    class InnerClassCreationExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)
        def NEW(self):
            return self.getToken(SimpleJavaParser.NEW, 0)
        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)
        def arguments(self):
            return self.getTypedRuleContext(SimpleJavaParser.ArgumentsContext,0)

        def typeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeArgumentsOrDiamondContext,0)

        def classBody(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassBodyContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerClassCreationExpr" ):
                listener.enterInnerClassCreationExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerClassCreationExpr" ):
                listener.exitInnerClassCreationExpr(self)


    class BitwiseXorExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)

        def CARET(self):
            return self.getToken(SimpleJavaParser.CARET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseXorExpr" ):
                listener.enterBitwiseXorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseXorExpr" ):
                listener.exitBitwiseXorExpr(self)


    class NewCreatorExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NEW(self):
            return self.getToken(SimpleJavaParser.NEW, 0)
        def creator(self):
            return self.getTypedRuleContext(SimpleJavaParser.CreatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewCreatorExpr" ):
                listener.enterNewCreatorExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewCreatorExpr" ):
                listener.exitNewCreatorExpr(self)


    class MethodCallExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a SimpleJavaParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)
        def expressionList(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodCallExpr" ):
                listener.enterMethodCallExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodCallExpr" ):
                listener.exitMethodCallExpr(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SimpleJavaParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 132
        self.enterRecursionRule(localctx, 132, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                localctx = SimpleJavaParser.PrimaryExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 788
                self.primary()
                pass

            elif la_ == 2:
                localctx = SimpleJavaParser.NewCreatorExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 789
                self.match(SimpleJavaParser.NEW)
                self.state = 790
                self.creator()
                pass

            elif la_ == 3:
                localctx = SimpleJavaParser.CastExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 791
                self.match(SimpleJavaParser.LPAREN)
                self.state = 792
                self.type_()
                self.state = 793
                self.match(SimpleJavaParser.RPAREN)
                self.state = 794
                self.expression(18)
                pass

            elif la_ == 4:
                localctx = SimpleJavaParser.PrefixExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 796
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & 3145731) != 0)):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 797
                self.expression(4)
                pass

            elif la_ == 5:
                localctx = SimpleJavaParser.PreIncrementExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 798
                localctx.prefix = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==66 or _la==67):
                    localctx.prefix = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 799
                self.expression(3)
                pass

            elif la_ == 6:
                localctx = SimpleJavaParser.LambdaExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 800
                self.lambdaExpression()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 893
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 891
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        localctx = SimpleJavaParser.MultiplicativeExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 803
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 804
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63050394783186944) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 805
                        self.expression(18)
                        pass

                    elif la_ == 2:
                        localctx = SimpleJavaParser.AdditiveExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 806
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 807
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==51 or _la==52):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 808
                        self.expression(17)
                        pass

                    elif la_ == 3:
                        localctx = SimpleJavaParser.RelationalExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 809
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 810
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4323455642275676160) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 811
                        self.expression(16)
                        pass

                    elif la_ == 4:
                        localctx = SimpleJavaParser.EqualityExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 812
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 813
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==56 or _la==57):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 814
                        self.expression(14)
                        pass

                    elif la_ == 5:
                        localctx = SimpleJavaParser.BitwiseAndExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 815
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 816
                        localctx.op = self.match(SimpleJavaParser.BITAND)
                        self.state = 817
                        self.expression(13)
                        pass

                    elif la_ == 6:
                        localctx = SimpleJavaParser.BitwiseXorExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 818
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 819
                        localctx.op = self.match(SimpleJavaParser.CARET)
                        self.state = 820
                        self.expression(12)
                        pass

                    elif la_ == 7:
                        localctx = SimpleJavaParser.BitwiseOrExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 821
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 822
                        localctx.op = self.match(SimpleJavaParser.BITOR)
                        self.state = 823
                        self.expression(11)
                        pass

                    elif la_ == 8:
                        localctx = SimpleJavaParser.LogicalAndExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 824
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 825
                        localctx.op = self.match(SimpleJavaParser.AND)
                        self.state = 826
                        self.expression(10)
                        pass

                    elif la_ == 9:
                        localctx = SimpleJavaParser.LogicalOrExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 827
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 828
                        localctx.op = self.match(SimpleJavaParser.OR)
                        self.state = 829
                        self.expression(9)
                        pass

                    elif la_ == 10:
                        localctx = SimpleJavaParser.TernaryExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 830
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 831
                        self.match(SimpleJavaParser.QUESTION)
                        self.state = 832
                        self.expression(0)
                        self.state = 833
                        self.match(SimpleJavaParser.COLON)
                        self.state = 834
                        self.expression(8)
                        pass

                    elif la_ == 11:
                        localctx = SimpleJavaParser.AssignmentExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 836
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 837
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & 4192257) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 838
                        self.expression(7)
                        pass

                    elif la_ == 12:
                        localctx = SimpleJavaParser.RelationalExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 839
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 843
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [58]:
                            self.state = 840
                            self.match(SimpleJavaParser.LT)
                            self.state = 841
                            if not not self.isTypeArgumentsAhead():
                                from antlr4.error.Errors import FailedPredicateException
                                raise FailedPredicateException(self, "not self.isTypeArgumentsAhead()")
                            pass
                        elif token in [59, 60, 61]:
                            self.state = 842
                            localctx.op = self._input.LT(1)
                            _la = self._input.LA(1)
                            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4035225266123964416) != 0)):
                                localctx.op = self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 845
                        self.expression(6)
                        pass

                    elif la_ == 13:
                        localctx = SimpleJavaParser.ArrayAccessExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 846
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 847
                        self.match(SimpleJavaParser.LBRACK)
                        self.state = 848
                        self.expression(0)
                        self.state = 849
                        self.match(SimpleJavaParser.RBRACK)
                        pass

                    elif la_ == 14:
                        localctx = SimpleJavaParser.DotMethodCallExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 851
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 852
                        self.match(SimpleJavaParser.DOT)
                        self.state = 853
                        self.match(SimpleJavaParser.IDENTIFIER)
                        self.state = 854
                        self.match(SimpleJavaParser.LPAREN)
                        self.state = 856
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                            self.state = 855
                            self.expressionList()


                        self.state = 858
                        self.match(SimpleJavaParser.RPAREN)
                        pass

                    elif la_ == 15:
                        localctx = SimpleJavaParser.MethodCallExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 859
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 860
                        self.match(SimpleJavaParser.LPAREN)
                        self.state = 862
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                            self.state = 861
                            self.expressionList()


                        self.state = 864
                        self.match(SimpleJavaParser.RPAREN)
                        pass

                    elif la_ == 16:
                        localctx = SimpleJavaParser.FieldAccessExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 865
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 866
                        self.match(SimpleJavaParser.DOT)
                        self.state = 867
                        self.match(SimpleJavaParser.IDENTIFIER)
                        pass

                    elif la_ == 17:
                        localctx = SimpleJavaParser.DotThisExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 868
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 869
                        self.match(SimpleJavaParser.DOT)
                        self.state = 870
                        self.match(SimpleJavaParser.THIS)
                        pass

                    elif la_ == 18:
                        localctx = SimpleJavaParser.InnerClassCreationExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 871
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 872
                        self.match(SimpleJavaParser.DOT)
                        self.state = 873
                        self.match(SimpleJavaParser.NEW)
                        self.state = 875
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==58:
                            self.state = 874
                            self.typeArgumentsOrDiamond()


                        self.state = 877
                        self.match(SimpleJavaParser.IDENTIFIER)
                        self.state = 878
                        self.arguments()
                        self.state = 880
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                        if la_ == 1:
                            self.state = 879
                            self.classBody()


                        pass

                    elif la_ == 19:
                        localctx = SimpleJavaParser.DotSuperExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 882
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 883
                        self.match(SimpleJavaParser.DOT)
                        self.state = 884
                        self.match(SimpleJavaParser.SUPER)
                        self.state = 885
                        self.superSuffix()
                        pass

                    elif la_ == 20:
                        localctx = SimpleJavaParser.InstanceofExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 886
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 887
                        self.match(SimpleJavaParser.INSTANCEOF)
                        self.state = 888
                        self.type_()
                        pass

                    elif la_ == 21:
                        localctx = SimpleJavaParser.PostIncrementExprContext(self, SimpleJavaParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 889
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 890
                        localctx.postfix = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==67):
                            localctx.postfix = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 895
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CreatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createdName(self):
            return self.getTypedRuleContext(SimpleJavaParser.CreatedNameContext,0)


        def arrayCreatorRest(self):
            return self.getTypedRuleContext(SimpleJavaParser.ArrayCreatorRestContext,0)


        def classCreatorRest(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassCreatorRestContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_creator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreator" ):
                listener.enterCreator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreator" ):
                listener.exitCreator(self)




    def creator(self):

        localctx = SimpleJavaParser.CreatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_creator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.createdName()
            self.state = 899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 897
                self.arrayCreatorRest()
                pass

            elif la_ == 2:
                self.state = 898
                self.classCreatorRest()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreatedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitiveType(self):
            return self.getTypedRuleContext(SimpleJavaParser.PrimitiveTypeContext,0)


        def classOrInterfaceType(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassOrInterfaceTypeContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_createdName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreatedName" ):
                listener.enterCreatedName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreatedName" ):
                listener.exitCreatedName(self)




    def createdName(self):

        localctx = SimpleJavaParser.CreatedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_createdName)
        try:
            self.state = 903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [22, 23, 24, 25, 26, 27, 28, 29]:
                self.enterOuterAlt(localctx, 1)
                self.state = 901
                self.primitiveType()
                pass
            elif token in [96]:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.classOrInterfaceType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsOrDiamondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LT(self):
            return self.getToken(SimpleJavaParser.LT, 0)

        def GT(self):
            return self.getToken(SimpleJavaParser.GT, 0)

        def typeList(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeListContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_typeArgumentsOrDiamond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArgumentsOrDiamond" ):
                listener.enterTypeArgumentsOrDiamond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArgumentsOrDiamond" ):
                listener.exitTypeArgumentsOrDiamond(self)




    def typeArgumentsOrDiamond(self):

        localctx = SimpleJavaParser.TypeArgumentsOrDiamondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typeArgumentsOrDiamond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(SimpleJavaParser.LT)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1069547520) != 0) or _la==96:
                self.state = 906
                self.typeList()


            self.state = 909
            self.match(SimpleJavaParser.GT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.LBRACK)
            else:
                return self.getToken(SimpleJavaParser.LBRACK, i)

        def RBRACK(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.RBRACK)
            else:
                return self.getToken(SimpleJavaParser.RBRACK, i)

        def arrayInitializer(self):
            return self.getTypedRuleContext(SimpleJavaParser.ArrayInitializerContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_arrayCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayCreatorRest" ):
                listener.enterArrayCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayCreatorRest" ):
                listener.exitArrayCreatorRest(self)




    def arrayCreatorRest(self):

        localctx = SimpleJavaParser.ArrayCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_arrayCreatorRest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.match(SimpleJavaParser.LBRACK)
            self.state = 939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.state = 912
                self.match(SimpleJavaParser.RBRACK)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==88:
                    self.state = 913
                    self.match(SimpleJavaParser.LBRACK)
                    self.state = 914
                    self.match(SimpleJavaParser.RBRACK)
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 920
                self.arrayInitializer()
                pass
            elif token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 47, 49, 50, 51, 52, 58, 66, 67, 71, 72, 86, 95, 96, 97, 98, 99, 100]:
                self.state = 921
                self.expression(0)
                self.state = 922
                self.match(SimpleJavaParser.RBRACK)
                self.state = 929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 923
                        self.match(SimpleJavaParser.LBRACK)
                        self.state = 924
                        self.expression(0)
                        self.state = 925
                        self.match(SimpleJavaParser.RBRACK) 
                    self.state = 931
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                self.state = 936
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 932
                        self.match(SimpleJavaParser.LBRACK)
                        self.state = 933
                        self.match(SimpleJavaParser.RBRACK) 
                    self.state = 938
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassCreatorRestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArgumentsOrDiamond(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeArgumentsOrDiamondContext,0)


        def arguments(self):
            return self.getTypedRuleContext(SimpleJavaParser.ArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_classCreatorRest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCreatorRest" ):
                listener.enterClassCreatorRest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCreatorRest" ):
                listener.exitClassCreatorRest(self)




    def classCreatorRest(self):

        localctx = SimpleJavaParser.ClassCreatorRestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_classCreatorRest)
        try:
            self.state = 948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 941
                    self.typeArgumentsOrDiamond()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.arguments()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.classBody()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def expressionList(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = SimpleJavaParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(SimpleJavaParser.LPAREN)
            self.state = 952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                self.state = 951
                self.expressionList()


            self.state = 954
            self.match(SimpleJavaParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def memberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.MemberDeclarationContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.MemberDeclarationContext,i)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)




    def classBody(self):

        localctx = SimpleJavaParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(SimpleJavaParser.LBRACE)
            self.state = 960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1073740032) != 0) or _la==95 or _la==96:
                self.state = 957
                self.memberDeclaration()
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 963
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)




    def expressionList(self):

        localctx = SimpleJavaParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.expression(0)
            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==90:
                self.state = 966
                self.match(SimpleJavaParser.COMMA)
                self.state = 967
                self.expression(0)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameters(self):
            return self.getTypedRuleContext(SimpleJavaParser.FormalParametersContext,0)


        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def block(self):
            return self.getTypedRuleContext(SimpleJavaParser.BlockContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_lambdaExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaExpression" ):
                listener.enterLambdaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaExpression" ):
                listener.exitLambdaExpression(self)




    def lambdaExpression(self):

        localctx = SimpleJavaParser.LambdaExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_lambdaExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.formalParameters()
            self.state = 974
            self.match(SimpleJavaParser.T__4)
            self.state = 977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [21, 22, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 47, 49, 50, 51, 52, 58, 66, 67, 71, 72, 86, 95, 96, 97, 98, 99, 100]:
                self.state = 975
                self.expression(0)
                pass
            elif token in [84]:
                self.state = 976
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperSuffixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arguments(self):
            return self.getTypedRuleContext(SimpleJavaParser.ArgumentsContext,0)


        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)

        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_superSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperSuffix" ):
                listener.enterSuperSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperSuffix" ):
                listener.exitSuperSuffix(self)




    def superSuffix(self):

        localctx = SimpleJavaParser.SuperSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_superSuffix)
        try:
            self.state = 985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [86]:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self.arguments()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.match(SimpleJavaParser.DOT)
                self.state = 981
                self.match(SimpleJavaParser.IDENTIFIER)
                self.state = 983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.arguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(SimpleJavaParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(SimpleJavaParser.RPAREN, 0)

        def THIS(self):
            return self.getToken(SimpleJavaParser.THIS, 0)

        def SUPER(self):
            return self.getToken(SimpleJavaParser.SUPER, 0)

        def literal(self):
            return self.getTypedRuleContext(SimpleJavaParser.LiteralContext,0)


        def IDENTIFIER(self):
            return self.getToken(SimpleJavaParser.IDENTIFIER, 0)

        def classOrInterfaceType(self):
            return self.getTypedRuleContext(SimpleJavaParser.ClassOrInterfaceTypeContext,0)


        def DOT(self):
            return self.getToken(SimpleJavaParser.DOT, 0)

        def CLASS(self):
            return self.getToken(SimpleJavaParser.CLASS, 0)

        def primitiveType(self):
            return self.getTypedRuleContext(SimpleJavaParser.PrimitiveTypeContext,0)


        def VOID(self):
            return self.getToken(SimpleJavaParser.VOID, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(SimpleJavaParser.TypeArgumentsContext,0)


        def expressionList(self):
            return self.getTypedRuleContext(SimpleJavaParser.ExpressionListContext,0)


        def getRuleIndex(self):
            return SimpleJavaParser.RULE_primary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary" ):
                listener.enterPrimary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary" ):
                listener.exitPrimary(self)




    def primary(self):

        localctx = SimpleJavaParser.PrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_primary)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 987
                self.match(SimpleJavaParser.LPAREN)
                self.state = 988
                self.expression(0)
                self.state = 989
                self.match(SimpleJavaParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(SimpleJavaParser.THIS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 992
                self.match(SimpleJavaParser.SUPER)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 993
                self.literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 994
                self.match(SimpleJavaParser.IDENTIFIER)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 995
                self.classOrInterfaceType()
                self.state = 996
                self.match(SimpleJavaParser.DOT)
                self.state = 997
                self.match(SimpleJavaParser.THIS)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 999
                self.classOrInterfaceType()
                self.state = 1000
                self.match(SimpleJavaParser.DOT)
                self.state = 1001
                self.match(SimpleJavaParser.CLASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1003
                self.primitiveType()
                self.state = 1004
                self.match(SimpleJavaParser.DOT)
                self.state = 1005
                self.match(SimpleJavaParser.CLASS)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1007
                self.match(SimpleJavaParser.VOID)
                self.state = 1008
                self.match(SimpleJavaParser.DOT)
                self.state = 1009
                self.match(SimpleJavaParser.CLASS)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1010
                self.typeArguments()
                self.state = 1011
                self.match(SimpleJavaParser.IDENTIFIER)
                self.state = 1012
                self.match(SimpleJavaParser.LPAREN)
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33823916131) != 0):
                    self.state = 1013
                    self.expressionList()


                self.state = 1016
                self.match(SimpleJavaParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalIntegerLiteral(self):
            return self.getToken(SimpleJavaParser.DecimalIntegerLiteral, 0)

        def FloatingPointLiteral(self):
            return self.getToken(SimpleJavaParser.FloatingPointLiteral, 0)

        def StringLiteral(self):
            return self.getToken(SimpleJavaParser.StringLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(SimpleJavaParser.CharacterLiteral, 0)

        def TRUE(self):
            return self.getToken(SimpleJavaParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(SimpleJavaParser.FALSE, 0)

        def NULL(self):
            return self.getToken(SimpleJavaParser.NULL, 0)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = SimpleJavaParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 240518168576) != 0) or ((((_la - 97)) & ~0x3f) == 0 and ((1 << (_la - 97)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayInitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(SimpleJavaParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(SimpleJavaParser.RBRACE, 0)

        def variableInitializer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SimpleJavaParser.VariableInitializerContext)
            else:
                return self.getTypedRuleContext(SimpleJavaParser.VariableInitializerContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SimpleJavaParser.COMMA)
            else:
                return self.getToken(SimpleJavaParser.COMMA, i)

        def getRuleIndex(self):
            return SimpleJavaParser.RULE_arrayInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayInitializer" ):
                listener.enterArrayInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayInitializer" ):
                listener.exitArrayInitializer(self)




    def arrayInitializer(self):

        localctx = SimpleJavaParser.ArrayInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_arrayInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(SimpleJavaParser.LBRACE)
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 296815604531200000) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 33824178275) != 0):
                self.state = 1023
                self.variableInitializer()
                self.state = 1028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1024
                        self.match(SimpleJavaParser.COMMA)
                        self.state = 1025
                        self.variableInitializer() 
                    self.state = 1030
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,115,self._ctx)



            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==90:
                self.state = 1033
                self.match(SimpleJavaParser.COMMA)


            self.state = 1036
            self.match(SimpleJavaParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[66] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 12:
                return not self.isTypeArgumentsAhead()
         

            if predIndex == 13:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 2)
         




